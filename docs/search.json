[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/articles/basic_use.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Basic Use","text":"can install development version hydrofabric3D GitHub :","code":"# install.packages(\"remotes\") devtools::install_github(\"lynker-spatial/hydrofabric3D\")"},{"path":"/articles/basic_use.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Basic Use","text":"basic example shows cut cross sections network.","code":""},{"path":"/articles/basic_use.html","id":"define-network","dir":"Articles","previous_headings":"Example","what":"Define Network","title":"Basic Use","text":"","code":"library(hydrofabric3D) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  (net = linestring %>%    mutate(bf_width = exp(0.700    + 0.365* log(totdasqkm)))) #> Simple feature collection with 325 features and 5 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 77487.09 ymin: 890726.5 xmax: 130307.4 ymax: 939129.8 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 325 × 6 #>    nhdplus_comid                       geometry  comid totdasqkm dist_m bf_width #>  * <chr>                       <LINESTRING [m]>  <dbl>     <dbl>  <dbl>    <dbl> #>  1 101           (128525.6 892408.3, 128565.7 … 1.01e2  7254.    3.25e3   51.7   #>  2 24599575      (128084.7 892952.4, 128525.6 … 2.46e7  7249.    7.00e2   51.6   #>  3 1078635       (127687.6 893270.4, 127799.7 … 1.08e6  7248.    5.22e2   51.6   #>  4 1078637       (124942.8 893959.6, 124948.2 … 1.08e6    68.2   4.17e3    9.41  #>  5 1078639       (125523.1 892528, 125657.3 89… 1.08e6  7180.    2.76e3   51.5   #>  6 1078577       (123219.9 902292.8, 123233.5 … 1.08e6    19.8   9.91e3    5.99  #>  7 1078575       (121975.5 909050.8, 122028.9 … 1.08e6    41.3   1.87e4    7.83  #>  8 1078657       (124263.8 892410.4, 124420.6 … 1.08e6  7179.    1.66e3   51.5   #>  9 1078663       (125628.9 892216, 125555.7 89… 1.08e6     0.099 7.54e2    0.866 #> 10 1078643       (124248.1 892440.7, 124263.8 … 1.08e6  7178.    3.41e1   51.5   #> # ℹ 315 more rows   plot(net$geometry)"},{"path":"/articles/basic_use.html","id":"cut-cross-sections","dir":"Articles","previous_headings":"Example","what":"Cut cross sections","title":"Basic Use","text":"","code":"(transects = cut_cross_sections(net = net,                          crosswalk_id = \"comid\",                           cs_widths = pmax(50, net$bf_width * 7),                          num = 10) ) #> Densifying #> Smoothing #> Cutting transects #> Formatting transects #> Simple feature collection with 2372 features and 6 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 77486.95 ymin: 890563.3 xmax: 130368.6 ymax: 939130 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 2,372 × 7 #>    comid cs_id cs_lengthm cs_measure ds_distance sinuosity #>    <dbl> <int>      <dbl>      <dbl>       <dbl>     <dbl> #>  1   101     1       362.      0.393        12.8      1.05 #>  2   101     2       362.     11.3         369.       1.00 #>  3   101     3       362.     25.2         822.       1.01 #>  4   101     4       362.     38.1        1242.       1.05 #>  5   101     5       362.     50.1        1632.       1.08 #>  6   101     6       362.     60.2        1961.       1.19 #>  7   101     7       362.     68.7        2238.       1.34 #>  8   101     8       362.     76.1        2480.       1.34 #>  9   101     9       362.     86.1        2805.       1.15 #> 10   101    10       362.     99.7        3250.       1.00 #> # ℹ 2,362 more rows #> # ℹ 1 more variable: geometry <LINESTRING [m]>  plot(transects$geometry)"},{"path":"/articles/basic_use.html","id":"define-cross-section-points","dir":"Articles","previous_headings":"Example","what":"Define Cross section points","title":"Basic Use","text":"","code":"(pts = cross_section_pts(transects,                           crosswalk_id = \"comid\",                         dem = \"/vsicurl/https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/1/TIFF/USGS_Seamless_DEM_1.vrt\")) #> Simple feature collection with 24386 features and 7 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 77487.45 ymin: 890577.2 xmax: 130362.9 ymax: 939128.2 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 24,386 × 8 #>    comid cs_id pt_id cs_lengthm relative_distance     Z points_per_cs #>    <dbl> <int> <int>      <dbl>             <dbl> <dbl>         <dbl> #>  1   101     1     1       362.               0    41.9            12 #>  2   101     1     2       362.              32.9  41.1            12 #>  3   101     1     3       362.              65.7  42.1            12 #>  4   101     1     4       362.              98.6  40.6            12 #>  5   101     1     5       362.             131.   38.8            12 #>  6   101     1     6       362.             164.   36.2            12 #>  7   101     1     7       362.             197.   37.9            12 #>  8   101     1     8       362.             230.   41.6            12 #>  9   101     1     9       362.             263.   44.2            12 #> 10   101     1    10       362.             296.   44.3            12 #> # ℹ 24,376 more rows #> # ℹ 1 more variable: geometry <POINT [m]>"},{"path":"/articles/basic_use.html","id":"classify-cross-section-points","dir":"Articles","previous_headings":"Example","what":"Classify Cross section points","title":"Basic Use","text":"","code":"(classified_pts = classify_points(pts, crosswalk_id = \"comid\")) #> Simple feature collection with 24386 features and 14 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 77487.45 ymin: 890577.2 xmax: 130362.9 ymax: 939128.2 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 24,386 × 15 #>    comid cs_id pt_id cs_lengthm relative_distance     Z points_per_cs class      #>    <dbl> <int> <int>      <dbl>             <dbl> <dbl>         <int> <chr>      #>  1   101     1     1       362.               0    41.9            12 left_bank  #>  2   101     1     2       362.              32.9  41.7            12 channel    #>  3   101     1     3       362.              65.7  41.2            12 channel    #>  4   101     1     4       362.              98.6  40.5            12 channel    #>  5   101     1     5       362.             131.   38.5            12 channel    #>  6   101     1     6       362.             164.   36.2            12 bottom     #>  7   101     1     7       362.             197.   38.6            12 channel    #>  8   101     1     8       362.             230.   41.2            12 channel    #>  9   101     1     9       362.             263.   43.4            12 channel    #> 10   101     1    10       362.             296.   44.1            12 right_bank #> # ℹ 24,376 more rows #> # ℹ 7 more variables: point_type <chr>, bottom <dbl>, left_bank <dbl>, #> #   right_bank <dbl>, valid_banks <lgl>, has_relief <lgl>, geometry <POINT [m]>"},{"path":"/articles/basic_use.html","id":"explore","dir":"Articles","previous_headings":"Example","what":"Explore!","title":"Basic Use","text":"","code":"library(ggplot2)  ggplot(data = filter(classified_pts, comid == 101) ) +    geom_line(aes(x = relative_distance, y = Z)) +    geom_point(aes(x = relative_distance, y = Z, color = class)) +    facet_wrap(~cs_id, scales = \"free\") +    theme_minimal() +    theme(legend.position = \"bottom\")"},{"path":"/articles/basic_use.html","id":"time-to-get-2372-transects-and-24386-classified-points","dir":"Articles","previous_headings":"Example","what":"Time to get 2372 transects and 24386 classified points …","title":"Basic Use","text":"","code":"system.time({   cs = net %>%    cut_cross_sections(crosswalk_id = \"comid\",                       cs_widths = pmax(50, net$bf_width * 7),                      num = 10) %>%    cross_section_pts(     crosswalk_id = \"comid\",     dem = '/vsicurl/https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/1/TIFF/USGS_Seamless_DEM_1.vrt') %>%    classify_points(crosswalk_id = \"comid\") }) #> Densifying #> Smoothing #> Cutting transects #> Formatting transects #>    user  system elapsed  #>   9.718   0.147  10.133"},{"path":"/articles/braided_cross_sections.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"NOAA OWP Braided Cross Section Reparation","text":"vignette breaks methods used within hydrofabric3D cut cross sections across complex braided river networks. following methods extend cross section cutting algorithms explained . begin testing set braided flowlines located Baton Rouge, LA. area complex set braids highlights need rectifying cross section linestrings better reflect natural world. Starting COMID 18717056, traverse upstream 30km get set 303 flowlines.   Now let’s add cross sections using algorithm described   created cross sections lines 10 transect lines per COMID/flowline geometry. problem section river braided want cross sections extend across multiple flowlines cases cross section line represents width across braided river sections, instead individual transect lines parallel braided flowlines. presents problem braided systems inherently complex irregular. want try extend cross section lines across flowlines given braid, first thing need way uniquely identifying braid flowlines within braid. accomplish , made use flowline /tonode topology relationships, implemented Depth First Search (DFS) graph traversal algorithm flowline network. DFS algorithm implemented way identify return set COMIDs make individual closed loop braid network.","code":"library(hydrofabric3D) library(dplyr) library(sf) library(ggplot2) library(nhdplusTools) # Heavily braided network in Baton Rouge, LA net <- nhdplusTools::navigate_network(start = 18717056, mode = \"UT\",  distance_km = 30)  flood_plain_sections = 5  net <-   net %>%   # https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2013WR013916   dplyr::mutate(     bf_width = exp(0.700     + 0.365* log(totdasqkm)),     cs_width = flood_plain_sections * bf_width     ) %>%    dplyr::select(comid, divergence,bf_width, cs_width, lengthkm, totdasqkm, fromnode, tonode, terminalpa)  # set geometry name of network to \"geometry\" net <- nhdplusTools::rename_geometry(net, \"geometry\") transects <- hydrofabric3D::cut_cross_sections(   net        = net,   id         = \"comid\",   cs_widths  = 200,   num        = 10,   fix_braids = FALSE,   add        = TRUE   ) #> Warning: st_centroid assumes attributes are constant over geometries"},{"path":"/articles/braided_cross_sections.html","id":"locate-braided-flowlines","dir":"Articles","previous_headings":"","what":"Locate braided flowlines","title":"NOAA OWP Braided Cross Section Reparation","text":"find_braids() function can used identify assign braid_id flowline NHDPlus network dataset. input network data must include comid, fromnode, tonode, divergence attributes.  Now method identifying flowlines part braid unique ID braids network. Next, find cross section lines braided flowlines, work extending encompass entire width river crossing across rest braided flowlines. First want join transect lines sections rivers flowlines braid_id (flowlines part braid braid_id “no_braid”) seperate braided flowlines non braided flowlines:  join braided flowlines transects  gives us set cross sections braided flowlines:  can now iterate cross sections determine cross sections extended, order, distance.","code":"# add braid_id column to network braids <- hydrofabric3D::find_braids(     network     = net,      add         = TRUE,     nested      = TRUE   ) #> Warning in nhdplusTools::make_node_topology(network, div, add = TRUE): #> nhdplusTools make_node_topology is deprecated. Use hydroloom version.  #> Warning in nhdplusTools::make_node_topology(network, div, add = TRUE): #> nhdplusTools make_node_topology is deprecated. Use hydroloom version. # not braided flowlines not_braids <-  dplyr::filter(braids, braid_id == \"no_braid\")  # trim down network to just the braided parts, and add a comid count to separate out multibraids braids <- dplyr::filter(braids, braid_id != \"no_braid\")   # add connected component \"component_id\" column braids <- find_connected_components(braids) #> Warning in nhdplusTools::make_node_topology(network, div, add = TRUE): #> nhdplusTools make_node_topology is deprecated. Use hydroloom version. cross_sections <-    transects %>%   dplyr::filter(hy_id %in% braids$comid) %>%   dplyr::left_join(   sf::st_drop_geometry(     dplyr::select(       braids, comid, braid_id, is_multibraid     )   ),   by = c(\"hy_id\" = \"comid\")   ) %>%    dplyr::arrange(-totdasqkm)"},{"path":"/articles/braided_cross_sections.html","id":"identify-flowlines-to-extend-across","dir":"Articles","previous_headings":"","what":"Identify flowlines to extend across","title":"NOAA OWP Braided Cross Section Reparation","text":"braided COMID, want take cross sections lines COMID try extend cross sections cut across relevant braided flowlines area. image highlights “origin” COMID (blue), flowlines (red) selected transect algorithm try cut across generate extended cross section geometry. red flowlines set neighboring braided flowlines “origin” COMID (blue). transect extension algorithm takes transect linestrings blue COMID tries extend cross sections cut across neighboring flowlines (red)  see braided flowlines network, animation walks COMID braided flowlines (blue), shows remaining braided flowlines eligible cut across cross sections lines “origin” COMID (blue).  look individual COMID given braid, decide want extend cross sections COMID outward try cut across flowlines within braided system, now method selecting COMIDs candidates extended line cut across. didn’t come way distinguishing flowlines extended transect lines allowed cross , algorithm ultimately try extend transect indefinitely/attempt cut across flowlines network. wouldn’t make hydrologic computational sense.","code":""},{"path":"/articles/braided_cross_sections.html","id":"order-of-extensions","dir":"Articles","previous_headings":"","what":"Order of extensions","title":"NOAA OWP Braided Cross Section Reparation","text":"ever take transect line extend outward either direction, run possibility newly extended transect line now violate one fundemental properties cross sections: extended transect line now intersects another flowline outside braided area extended transect line now intersects another transect line extended transect line now intersects COMID/flowline Moreover, flowlines braided system given priority flowlines comes order transects extended. Transect lines middle braided system extended first likely produce representative transect line, want prioritize extending first. Determining middle flowline braided system challenge. cases, mainstem flowline middle flowline within braid, cases isn’t case. found solution relies number intersections flowlines transect line extended either direction. transect line, can count number intersections either side transect extend transect line far needed cross neighboring flowlines. Using technique classified cross section line 5 different catagories according relative position within braided system: intersection: transect line never intersects another flowline maximum extension directions Outer single: Transect line intersect zero flowlines one direction, exactly one flowline direction, case braid just 2 parts. Outer multiple: Transect line intersect zero flowlines one direction, one flowline direction Inner: Transect line middle braid. 2 scenarios, either even odd number parallel flowlines braid: Odd case: number intersections directions \\[ intersects\\_count_1 == intersects\\_count_2 \\] Even case: maximum number counted intersections minus one equals minimum number counted intersections \\[ \\max(intersects\\_count_1, intersects\\_count_2) - 1 == \\min(intersects\\_count_1, intersects\\_count_2) \\] - Transect line middle outer portion braid  relationships shown using simple set parallel lines meant represent flowlines braid. red line image set highlights specific line(s) fall given classification.  order get best set final transect lines, prioritize “inner” transect lines work extending ones first. plot highlights cross sections separated groups cross sections (red) line extended first, group (blue) extended first set cross sections extended processed   check done new extended transect lines make sure intersecting parts original network, cross section linestrings. identify cross sections linestrings intersect original, non braided network flowlines, remove cross sections data. first pass cross section extension algorithm, want make sure “inner” cross sections CHANGED, intersect cross section lines just updated. remove inner cross sections intersect cross sections, keeping rest unextended inner cross sections data. separate cross section data based whether cross section already changed/updated first pass line extension algorithm, . gives us 2 separate set cross sections: set inner cross section lines (extended checked violating intersections) extended violate intersections. rest unchanged cross sections need processed/extended (without intersecting transect lines first dataset processed “inner” cross sections)","code":""},{"path":"/articles/braided_cross_sections.html","id":"process-inner-cross-sections","dir":"Articles","previous_headings":"","what":"Process inner cross sections","title":"NOAA OWP Braided Cross Section Reparation","text":"run transect extension algorithm first group cross sections end set extended cross sections:","code":""},{"path":"/articles/braided_cross_sections.html","id":"process-other-cross-sections","dir":"Articles","previous_headings":"","what":"Process other cross sections","title":"NOAA OWP Braided Cross Section Reparation","text":"take remaining “” cross sections (cross sections braided flowlines part first set extended cross cross sections) begin extending remaining eligible cross sections.","code":""},{"path":"/articles/braided_cross_sections.html","id":"bring-it-all-back-together","dir":"Articles","previous_headings":"","what":"Bring it all back together","title":"NOAA OWP Braided Cross Section Reparation","text":"Now gone fixed cross section braided flowlines, can merge updated/extended cross section linestrings back rest original set cross section lines","code":""},{"path":"/articles/cross_section_generator.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"NOAA OWP Cross Section Generator","text":"need cut transects elevation along set lines (e.g. river road networks) fairly common task unsatisfying number shelf solutions. particular need OWP need cut cross sections across entire CONUS river network provide much needed information flood mapping hydrologic modeling tasks. document shows initial efforts towards scale. small sets cross sections tools developed Rich McDonald (e.g. nhdplusTools::get_xs_point) preferred.","code":""},{"path":"/articles/cross_section_generator.html","id":"prep-network","dir":"Articles","previous_headings":"","what":"Prep Network","title":"NOAA OWP Cross Section Generator","text":"loading Upper Tributary COMID 101. total 325 flowlines total length 942.3 km. also prescribe floodplain width computing estimated bank full width (literature based power-law) multiplying 5. assumes 2 parts left-bank, 1 part channel (bank full), 2 parts right-bank. important latter!","code":"flood_plain_sections = 5 network = linestring %>%    # https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2013WR013916   mutate(bf_width = exp(0.700    + 0.365* log(totdasqkm)),          cs_width = flood_plain_sections * bf_width)"},{"path":"/articles/cross_section_generator.html","id":"algorithm-walk-through","dir":"Articles","previous_headings":"","what":"Algorithm Walk Through:","title":"NOAA OWP Cross Section Generator","text":"algorithm works generating set edges single line string, computing normal vector, transformed series afline transformations. illustrate lets start single flowline:","code":"linestring = filter(network, comid == 101)"},{"path":"/articles/cross_section_generator.html","id":"step-1-explode-linestring-into-edges","dir":"Articles","previous_headings":"Algorithm Walk Through:","what":"Step 1: Explode Linestring into edges:","title":"NOAA OWP Cross Section Generator","text":"","code":"# sf --> geos object  line <- as_geos_geometry(linestring)    # extract vertices  vertices <- wk_vertices(line)    # Use vertices to reconstruct line segments   edges <- as_geos_geometry(     wk_linestring(       vertices[c(1, rep(seq_along(vertices)[-c(1, length(vertices))], each = 2), length(vertices))],       feature_id = rep(seq_len(length(vertices) - 1), each = 2)     )   )"},{"path":"/articles/cross_section_generator.html","id":"step-2-define-edge-mid-and-end-point","dir":"Articles","previous_headings":"Algorithm Walk Through:","what":"Step 2: Define Edge Mid and End Point","title":"NOAA OWP Cross Section Generator","text":"next steps individual edge exploded linestring:","code":"# Starting with just the first edge edge  <-  edges[1] # Define a width of desired cross section width <-  linestring$cs_width  # find the midpoint midpoint <- geos_interpolate_normalized(edge, 0.5) # find the end point ep       <- geos_point_end(edge)"},{"path":"/articles/cross_section_generator.html","id":"step-3-define-cross-section-at-end-point","dir":"Articles","previous_headings":"Algorithm Walk Through:","what":"Step 3: Define Cross Section at end Point","title":"NOAA OWP Cross Section Generator","text":"generate cross section passes end point need steps","code":""},{"path":"/articles/cross_section_generator.html","id":"define-a-normal-edge","dir":"Articles","previous_headings":"Algorithm Walk Through: > Step 3: Define Cross Section at end Point","what":"Define a normal edge","title":"NOAA OWP Cross Section Generator","text":"3 transformations define normal edge: affine_translate: define coordinate offsets x, y direction negative value X Y coordinate edge midpoint affine_scale: apply X scale factor 1/length edge, Y scale factor 1/length edge Rotate new line 90 degrees","code":"normal_edge <- wk_transform(edge,                                  wk_affine_compose(             wk_affine_translate(dx = -geos_x(midpoint), dy = -geos_y(midpoint)),             wk_affine_scale(1 / geos_length(edge), 1 / geos_length(edge)),             wk_affine_rotate(90)   ))"},{"path":"/articles/cross_section_generator.html","id":"define-the-cross-sections","dir":"Articles","previous_headings":"Algorithm Walk Through: > Step 3: Define Cross Section at end Point","what":"Define the cross sections","title":"NOAA OWP Cross Section Generator","text":"2 transformations needed define cross section: affine_scale: apply X scale factor desired width, Y scale factor desired width affine_translate: define coordinate offsets x, y direction negative value X Y coordinate edge end point Lastly, CRS original line reassigned.","code":"cs = wk_set_crs(wk_transform(     normal_edge,     wk_affine_compose(       wk_affine_scale(width, width),       wk_affine_translate(geos_x(ep), geos_y(ep))     )), wk_crs(line))"},{"path":"/articles/cross_section_generator.html","id":"cut-a-full-flowline","dir":"Articles","previous_headings":"","what":"Cut a Full Flowline","title":"NOAA OWP Cross Section Generator","text":"Using logic, can write function generates series cross sections edge line string:  OK ’s pretty good! things don’t like. must enforce following two conditions: Condition 1: Cross sections cross Condition 2: single cross section cross given reach Predicates like st_intersect run end without wiping cross-sections intersect. , need implement logic enforce : Awesome! gained just fraction time ensuring set valid cross sections generated.","code":"# Make a function: cut_transect = function(edge, width){        midpoint <- geos_interpolate_normalized(edge, 0.5)   ep       <- geos_point_end(edge)      normale_edge <- wk_transform(edge,                                    wk_affine_compose(               wk_affine_translate(dx = -geos_x(midpoint), dy = -geos_y(midpoint)),               wk_affine_scale(1 / geos_length(edge), 1 / geos_length(edge)),               wk_affine_rotate(90)))        wk_set_crs(wk_transform(       normale_edge,       wk_affine_compose(         wk_affine_scale(width, width),         wk_affine_translate(geos_x(ep), geos_y(ep))       )     ), wk_crs(edge)) }  system.time({   all = vec_c(!!!Map(cut_transect, edges, width = linestring$cs_width)) }) ##    user  system elapsed  ##   0.019   0.000   0.019 get_transects = function(edges, line, width){      if(length(width) != length(edges)){     width = rep(width[1], length(edges))   }      transects <- geos_empty()      for(i in 1:length(edges)){          tran = cut_transect(edges[i], width[i])          # If a MULTIPOINT, then it crosses more the once     if(geos_type(geos_intersection(tran, line)) == \"point\") {       # Ensure that there are no intersections with previously computed cross sections         if (!any(geos_intersects(tran, transects))) {           transects <-  vec_c(transects, tran)         }       }   }    transects[!geos_is_empty(transects)]  }  system.time({  transects =  get_transects(edges, line, width = 250) }) ##    user  system elapsed  ##    0.03    0.00    0.03"},{"path":"/articles/cross_section_generator.html","id":"flow-network","dir":"Articles","previous_headings":"Cut a Full Flowline","what":"Flow Network","title":"NOAA OWP Cross Section Generator","text":"OK, gone single edge, full flowline. Now - full network! , requires looping flowlines. Additionally add new items: num argument allows user restrict number cross sections desired per flowline. crosswalk_id argument allows user specify identifier column input. provided assigned “hy_id” output. prescribed, 1:n() index added. outputs also 1:n() cs_id describing ordered set cross sections 1 upstream n downstream. Lastly, final pass made remove cross sections intersect cross section different flowline.","code":"cut_cross_sections = function(net, crosswalk_id = NULL, widths = NULL, num = NULL){      ll = list()      if(length(widths) != nrow(net)){     widths = rep(widths[1], nrow(net))   }    for(j in 1:nrow(net)){         line <- as_geos_geometry(net[j,])         vertices <- wk_vertices(line)          edges <- as_geos_geometry(       wk_linestring(         vertices[c(1, rep(seq_along(vertices)[-c(1, length(vertices))], each = 2), length(vertices))],         feature_id = rep(seq_len(length(vertices) - 1), each = 2)       )     )         if(!is.null(num)){       edges = edges[as.integer(seq.int(1, length(edges), length.out = num))]     }      ll[[j]] = get_transects(edges, line, widths[j])   }    ids_length = lengths(ll)   ll = st_as_sf(Reduce(c,ll))      if(!is.null(crosswalk_id)){     ll$hy_id = rep(net[[crosswalk_id]], times = ids_length)   } else {      ll$hy_id = rep(1:nrow(net), times = ids_length)   }      ll[lengths(st_intersects(ll)) == 1, ] %>%      group_by(hy_id) %>%      mutate(cs_id = 1:n()) %>%      ungroup()    }  system.time({   oo = cut_cross_sections(net = network,                            crosswalk_id = \"comid\",                            widths = network$cs_width,                           num = 10) }) ##    user  system elapsed  ##   2.043   0.013   2.056"},{"path":"/articles/cross_section_generator.html","id":"transects-to-3d-channel","dir":"Articles","previous_headings":"Cut a Full Flowline","what":"Transects to 3D channel","title":"NOAA OWP Cross Section Generator","text":"turn extracted transect set “3D” cross sections, need define set number points sample along line, use extract elevation DEM. , use VRT file 10m 3DEP elevation data produced National Map support 3DEP team.","code":"library(terra) points_per_cs = 35 elev_url = \"/vsicurl/https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/13/TIFF/USGS_Seamless_DEM_13.vrt\"  extract_pt_val = function(rast, pts){ extract(rast, project(vect(pts), crs(rast)))[,2] }  system.time({   cs_pts =        st_set_geometry(oo, st_line_sample(oo, points_per_cs)) %>%        st_cast(\"POINT\") %>%       st_transform(st_crs(rast(elev_url))) %>%        mutate(Z   = extract_pt_val(rast(elev_url), .)) %>%        group_by(hy_id, cs_id) %>%        mutate(pt_id = 1:n()) %>%        ungroup() }) ##    user  system elapsed  ##   4.321   0.170  17.145"},{"path":"/articles/cross_section_generator.html","id":"reach-addressing","dir":"Articles","previous_headings":"","what":"Reach Addressing","title":"NOAA OWP Cross Section Generator","text":"key hydrologic locations linear reference describes percentage along reach location sits. reference center cross section, can use flowline indexing tools nhdplusTools:","code":"system.time({   # Find middle point of each cross section   tmp = cs_pts %>%      group_by(hy_id, cs_id) %>%      arrange(pt_id) %>%      slice(ceiling(n()/2))  %>%      ungroup() %>%      st_transform(5070)    # Add the needed information to our network object, and fine flowline index   xx = left_join(network,                   get_vaa(c(\"tomeas\", \"frommeas\", 'reachcode'), updated_network = TRUE),                   by = c(\"comid\")) %>%       get_flowline_index(tmp) %>%       mutate(cs_id = tmp$cs_id[crosswalk_id], crosswalk_id = NULL) %>%       rename(hy_id = COMID)      # add new information of cs_pts and rearrange columns   cs_pts = left_join(cs_pts, xx, by = c(\"hy_id\", \"cs_id\")) %>%      select(hy_id, cs_id, pt_id, everything()) })    head(cs_pts)"},{"path":"/articles/cross_section_generator.html","id":"channel-classifiction","dir":"Articles","previous_headings":"","what":"Channel Classifiction","title":"NOAA OWP Cross Section Generator","text":"OK now cut cross sections along network, sampled extracted depths, addressed hydrologic network! Now, want assign classification point marking “right_bank”, “in_channel” “left_bank”.","code":"assign_class = function(Z, ratio = 1/5){       # The change in elevation across the cross section   dY = c(diff(Z), 0)   # devise a threshold for each section based on the prescribed ratio   thres = ratio * length(Z)   # Assume the left side is 2* threshold   la = 2*thres   # Assume the channel is the left edge plus one part.   ca = la:(thres + la)      # Assume the channel sits within the middle part + or minus a part   mid_sec = Z[(2*thres):(length(Z)-2*thres)+1]   mid = floor(median(which(Z == min(mid_sec) )))      if(mid < 2*thres | mid > 2 * thres){     mid = min(mid_sec)      mid = floor(median(which(mid_sec == mid))) + 2*thres   }    lb = which.min(dY[(mid-thres):mid]) + (mid-thres) - 2      rb = which.max(dY[(mid):(mid+thres)])  + mid + 1      class = rep(\"in_channel\", length(Z))   class[1:lb] = \"left_bank\"   class[rb:length(Z)] = \"right_bank\"      if(length(class) != length(Z) |  dim(table(class)) != 3){     class = c(rep(\"left_bank\", 2*thres),                rep('in_channel', thres),                rep(\"right_bank\", 2*thres))   }      class }  system.time({   cs_pts = cs_pts %>%      group_by(hy_id, cs_id) %>%     mutate(class = assign_class(Z, ratio = 1/flood_plain_sections)) %>%      ungroup() })  mapview::mapview(network)"},{"path":"/articles/cross_section_generator.html","id":"channel-bottom-alignment-and-bank-smoothing","dir":"Articles","previous_headings":"","what":"Channel bottom alignment and bank smoothing","title":"NOAA OWP Cross Section Generator","text":"Lastly, successful routing implementation, need ensure bottom cross section lower equal one upstream. traverse network making sure condition met, , cases isn’t, lower channel portion cross section make :","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mike Johnson. Author. Angus Watters. Author, maintainer. Arash Modaresi. Contributor. . Funder. . Funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson M, Watters (2024). hydrofabric3D: hydrofabric3D. R package version 0.1.86.","code":"@Manual{,   title = {hydrofabric3D: hydrofabric3D},   author = {Mike Johnson and Angus Watters},   year = {2024},   note = {R package version 0.1.86}, }"},{"path":"/index.html","id":"hydrofabric3d-","dir":"","previous_headings":"","what":"3D Hydrofabric Generation","title":"3D Hydrofabric Generation","text":"goal hydrofabric3D generate DEM-based cross sections hydrographic networks.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"3D Hydrofabric Generation","text":"can install development version hydrofabric3D GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"lynker-spatial/hydrofabric3D\")"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"3D Hydrofabric Generation","text":"project provides general tooling needed create flexible river channel data product based Reference Hydrofabric supports modeling needs NOAA USGS. comprised multiple modules together form clear picture hydrofabric:  package focuses fourth element, “multiscale cross sections” can integrated variety sources: Development automated tools generate cross sections DEM (package) Access machine learning models predict river channel depth, width, shape (see channel-shape-ML repo Integration channel cross sections HEC-RAS (RRASSLER eHydro (eHydRo) Estimates channel width multi-source data (e.g. remote sensing OpenStreetMaps) interoprability empowered shared data model shown line hydrofabric data model large.  visit website updates.","code":""},{"path":"/index.html","id":"base-line-cross-section-generation","dir":"","previous_headings":"","what":"Base line cross section generation","title":"3D Hydrofabric Generation","text":"One core utilities package generate DEM-based cross-sections (flood plains) hydrographic networks. example cross-sections look shown full description available hydrofabric3D addition generation, package can classify cross section left, right banks -channel shown . problem flat line bottom plots, represents water level data collected nothing conditions time collection (flood, dry year, etc.)","code":""},{"path":"/index.html","id":"getting-involved","dir":"","previous_headings":"","what":"Getting involved","title":"3D Hydrofabric Generation","text":"project active development contributions welcome. get started list contact information outlined loosely area focus. Feel free reach : Mike Johnson (mike.johnson@noaa.gov) hydrofabric development data models. Angus Watters (angus.watters@noaa.gov) cross section generation. Dami Eyelade (dami.eyelade@noaa.gov) integration satellite derived products. Arash Modaresi Rad (arash.rad@noaa.gov) development machine learning models.","code":""},{"path":"/reference/add_attribute_based_extension_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an extension_distance column based off valid_banks and has_relief attributes — add_attribute_based_extension_distances","title":"Add an extension_distance column based off valid_banks and has_relief attributes — add_attribute_based_extension_distances","text":"Add extension_distance column based valid_banks has_relief attributes","code":""},{"path":"/reference/add_attribute_based_extension_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an extension_distance column based off valid_banks and has_relief attributes — add_attribute_based_extension_distances","text":"","code":"add_attribute_based_extension_distances(   transects,   scale = 0.5,   length_col = NULL )"},{"path":"/reference/add_attribute_based_extension_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an extension_distance column based off valid_banks and has_relief attributes — add_attribute_based_extension_distances","text":"transects dataframe, tibble sf dataframe length_col,  \"valid_banks\", \"has_relief\" columns scale numeric, percentage current transect line length extend transects transects_to_extend . Default 0.5 (50% transect length) length_col character, name column numeric cross section length","code":""},{"path":"/reference/add_attribute_based_extension_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an extension_distance column based off valid_banks and has_relief attributes — add_attribute_based_extension_distances","text":"dataframe, tibble sf dataframe","code":""},{"path":"/reference/add_bank_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds attributes about the banks of each cross section in a dataframe of cross section points Function adds ","title":"Adds attributes about the banks of each cross section in a dataframe of cross section points Function adds ","text":"Adds attributes banks cross section dataframe cross section points Function adds \"bottom\", \"left_bank\", \"right_bank\" columns Z values \"lowest\" bottom point, \"highest\" left right bank Z values, respectively. also \"valid_banks\" column added TRUE hy_id/cs_id set cross section point least 1 bottom point least 1 left bank point 1 right bank point lowest \"bottom\" point.","code":""},{"path":"/reference/add_bank_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds attributes about the banks of each cross section in a dataframe of cross section points Function adds ","text":"","code":"add_bank_attributes(classified_pts)"},{"path":"/reference/add_bank_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds attributes about the banks of each cross section in a dataframe of cross section points Function adds ","text":"classified_pts sf dataframe points \"hy_id\", \"cs_id\", \"point_type\" columns. Output hydrofabric3D::classify_pts()","code":""},{"path":"/reference/add_bank_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds attributes about the banks of each cross section in a dataframe of cross section points Function adds ","text":"sf dataframe added \"bottom\", \"left_bank\", \"right_bank\", \"valid_banks\" columns","code":""},{"path":"/reference/add_braid_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find braids and add to a dataframe/sf dataframe Adds a 'braid_id' and 'is_multibraid' columns to an sf dataframe containing a crosswalk_id and sf linestring geometires — add_braid_ids","title":"Find braids and add to a dataframe/sf dataframe Adds a 'braid_id' and 'is_multibraid' columns to an sf dataframe containing a crosswalk_id and sf linestring geometires — add_braid_ids","text":"Find braids add dataframe/sf dataframe Adds 'braid_id' 'is_multibraid' columns sf dataframe containing crosswalk_id sf linestring geometires","code":""},{"path":"/reference/add_braid_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find braids and add to a dataframe/sf dataframe Adds a 'braid_id' and 'is_multibraid' columns to an sf dataframe containing a crosswalk_id and sf linestring geometires — add_braid_ids","text":"","code":"add_braid_ids(network, crosswalk_id = NULL, verbose = FALSE)"},{"path":"/reference/add_braid_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find braids and add to a dataframe/sf dataframe Adds a 'braid_id' and 'is_multibraid' columns to an sf dataframe containing a crosswalk_id and sf linestring geometires — add_braid_ids","text":"network network object representing river network. crosswalk_id unique ID column name verbose Logical indicating whether display verbose messages braid detection process.","code":""},{"path":"/reference/add_braid_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find braids and add to a dataframe/sf dataframe Adds a 'braid_id' and 'is_multibraid' columns to an sf dataframe containing a crosswalk_id and sf linestring geometires — add_braid_ids","text":"dataframe sf dataframe added braid_id","code":""},{"path":"/reference/add_cs_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a cs_area column to a set of cross section points — add_cs_area","title":"Adds a cs_area column to a set of cross section points — add_cs_area","text":"Adds cs_area column set cross section points","code":""},{"path":"/reference/add_cs_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a cs_area column to a set of cross section points — add_cs_area","text":"","code":"add_cs_area(cs_pts, crosswalk_id = NULL)"},{"path":"/reference/add_cs_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a cs_area column to a set of cross section points — add_cs_area","text":"cs_pts dataframe sf dataframe CS points crosswalk_id, cs_id, Z, relative distance columns crosswalk_id character, unique ID column name","code":""},{"path":"/reference/add_cs_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a cs_area column to a set of cross section points — add_cs_area","text":"cs_pts dataframe added numeric 'cs_area' column","code":""},{"path":"/reference/add_cs_area2.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a cs_area column to a set of cross section points (v2) — add_cs_area2","title":"Adds a cs_area column to a set of cross section points (v2) — add_cs_area2","text":"Adds cs_area column set cross section points (v2)","code":""},{"path":"/reference/add_cs_area2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a cs_area column to a set of cross section points (v2) — add_cs_area2","text":"","code":"add_cs_area2(cs_pts, crosswalk_id = NULL)"},{"path":"/reference/add_cs_area2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a cs_area column to a set of cross section points (v2) — add_cs_area2","text":"cs_pts dataframe sf dataframe CS points crosswalk_id, cs_id, Z, relative distance columns crosswalk_id character, unique ID column name","code":""},{"path":"/reference/add_cs_area2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a cs_area column to a set of cross section points (v2) — add_cs_area2","text":"cs_pts dataframe added numeric 'cs_area' column","code":""},{"path":"/reference/add_cs_bathymetry.html","id":null,"dir":"Reference","previous_headings":"","what":"Given provide inchannel widths and depths to a set of cross section points and derive estimated shapes — add_cs_bathymetry","title":"Given provide inchannel widths and depths to a set of cross section points and derive estimated shapes — add_cs_bathymetry","text":"Still early development phases","code":""},{"path":"/reference/add_cs_bathymetry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given provide inchannel widths and depths to a set of cross section points and derive estimated shapes — add_cs_bathymetry","text":"","code":"add_cs_bathymetry(cross_section_pts = NULL, crosswalk_id = NULL)"},{"path":"/reference/add_cs_bathymetry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given provide inchannel widths and depths to a set of cross section points and derive estimated shapes — add_cs_bathymetry","text":"cross_section_pts dataframe sf dataframe. Default NULL crosswalk_id character, ID column","code":""},{"path":"/reference/add_cs_bathymetry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given provide inchannel widths and depths to a set of cross section points and derive estimated shapes — add_cs_bathymetry","text":"dataframe sf dataframe AHG estimated points injected input cross section points","code":""},{"path":"/reference/add_cs_id_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a 1:number of cross sections 'cs_id' for each crosswalk_id by cs_measure — add_cs_id_sequence","title":"Add a 1:number of cross sections 'cs_id' for each crosswalk_id by cs_measure — add_cs_id_sequence","text":"Add 1:number cross sections 'cs_id' crosswalk_id cs_measure","code":""},{"path":"/reference/add_cs_id_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a 1:number of cross sections 'cs_id' for each crosswalk_id by cs_measure — add_cs_id_sequence","text":"","code":"add_cs_id_sequence(x, crosswalk_id = NULL)"},{"path":"/reference/add_cs_id_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a 1:number of cross sections 'cs_id' for each crosswalk_id by cs_measure — add_cs_id_sequence","text":"x dataframe, sf dataframe tibble crosswalk_id character, unique ID column","code":""},{"path":"/reference/add_cs_id_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a 1:number of cross sections 'cs_id' for each crosswalk_id by cs_measure — add_cs_id_sequence","text":"dataframe, sf dataframe tibble added 'cs_id' column","code":""},{"path":"/reference/add_hydrofabric_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a unique 'hydrofabric_id` to each row of a dataframe Internal conveniance function for when a dataframe / flowlines network does NOT have a specified ID column — add_hydrofabric_id","title":"Add a unique 'hydrofabric_id` to each row of a dataframe Internal conveniance function for when a dataframe / flowlines network does NOT have a specified ID column — add_hydrofabric_id","text":"Add unique 'hydrofabric_id` row dataframe Internal conveniance function dataframe / flowlines network specified ID column","code":""},{"path":"/reference/add_hydrofabric_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a unique 'hydrofabric_id` to each row of a dataframe Internal conveniance function for when a dataframe / flowlines network does NOT have a specified ID column — add_hydrofabric_id","text":"","code":"add_hydrofabric_id(df)"},{"path":"/reference/add_hydrofabric_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a unique 'hydrofabric_id` to each row of a dataframe Internal conveniance function for when a dataframe / flowlines network does NOT have a specified ID column — add_hydrofabric_id","text":"df sf dataframe, tibble, dataframe","code":""},{"path":"/reference/add_hydrofabric_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a unique 'hydrofabric_id` to each row of a dataframe Internal conveniance function for when a dataframe / flowlines network does NOT have a specified ID column — add_hydrofabric_id","text":"dataframe, sf dataframe, tibble","code":""},{"path":"/reference/add_intersects_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an ID column from 'y' if it intersects with 'x' — add_intersects_ids","title":"Add an ID column from 'y' if it intersects with 'x' — add_intersects_ids","text":"Add ID column 'y' intersects 'x'","code":""},{"path":"/reference/add_intersects_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an ID column from 'y' if it intersects with 'x' — add_intersects_ids","text":"","code":"add_intersects_ids(x, y, id_col)"},{"path":"/reference/add_intersects_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an ID column from 'y' if it intersects with 'x' — add_intersects_ids","text":"x sf dataframe y sf dataframe id_col character, unique ID column name 'y'","code":""},{"path":"/reference/add_intersects_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an ID column from 'y' if it intersects with 'x' — add_intersects_ids","text":"sf dataframe x id_col added intersects y","code":""},{"path":"/reference/add_is_complete_cs_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an is_complete_cs flag to cross sections points Any cross section points that has does NOT have ANY NA Z (depth) values is flagged as is_complete_cs = TRUE — add_is_complete_cs_flag","title":"Add an is_complete_cs flag to cross sections points Any cross section points that has does NOT have ANY NA Z (depth) values is flagged as is_complete_cs = TRUE — add_is_complete_cs_flag","text":"Add is_complete_cs flag cross sections points cross section points NA Z (depth) values flagged is_complete_cs = TRUE","code":""},{"path":"/reference/add_is_complete_cs_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an is_complete_cs flag to cross sections points Any cross section points that has does NOT have ANY NA Z (depth) values is flagged as is_complete_cs = TRUE — add_is_complete_cs_flag","text":"","code":"add_is_complete_cs_flag(cs_pts, crosswalk_id = NULL)"},{"path":"/reference/add_is_complete_cs_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an is_complete_cs flag to cross sections points Any cross section points that has does NOT have ANY NA Z (depth) values is flagged as is_complete_cs = TRUE — add_is_complete_cs_flag","text":"cs_pts cs points dataframe, tibble, sf dataframe crosswalk_id unique ID flowline","code":""},{"path":"/reference/add_is_complete_cs_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an is_complete_cs flag to cross sections points Any cross section points that has does NOT have ANY NA Z (depth) values is flagged as is_complete_cs = TRUE — add_is_complete_cs_flag","text":"cross_section_pts dataframe / tibble / sf dataframe cross section points is_complete_cs flag added","code":""},{"path":"/reference/add_is_missing_depth_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an is_missing_depth flag to cross sections points Any cross section points that has missing Z (depth = NA) values is flagged as is_missing_depth = TRUE — add_is_missing_depth_flag","title":"Add an is_missing_depth flag to cross sections points Any cross section points that has missing Z (depth = NA) values is flagged as is_missing_depth = TRUE — add_is_missing_depth_flag","text":"Add is_missing_depth flag cross sections points cross section points missing Z (depth = NA) values flagged is_missing_depth = TRUE","code":""},{"path":"/reference/add_is_missing_depth_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an is_missing_depth flag to cross sections points Any cross section points that has missing Z (depth = NA) values is flagged as is_missing_depth = TRUE — add_is_missing_depth_flag","text":"","code":"add_is_missing_depth_flag(cs_pts)"},{"path":"/reference/add_is_missing_depth_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an is_missing_depth flag to cross sections points Any cross section points that has missing Z (depth = NA) values is flagged as is_missing_depth = TRUE — add_is_missing_depth_flag","text":"cs_pts cs points dataframe, tibble, sf dataframe","code":""},{"path":"/reference/add_is_missing_depth_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an is_missing_depth flag to cross sections points Any cross section points that has missing Z (depth = NA) values is flagged as is_missing_depth = TRUE — add_is_missing_depth_flag","text":"cross_section_pts dataframe / tibble / sf dataframe cross section points missing depths flag added","code":""},{"path":"/reference/add_is_outlet_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a logical 'is_outlet' flag to a set of transects identifying the most downstream transect — add_is_outlet_flag","title":"Adds a logical 'is_outlet' flag to a set of transects identifying the most downstream transect — add_is_outlet_flag","text":"Adds logical 'is_outlet' flag set transects identifying downstream transect","code":""},{"path":"/reference/add_is_outlet_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a logical 'is_outlet' flag to a set of transects identifying the most downstream transect — add_is_outlet_flag","text":"","code":"add_is_outlet_flag(x, crosswalk_id = NULL)"},{"path":"/reference/add_is_outlet_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a logical 'is_outlet' flag to a set of transects identifying the most downstream transect — add_is_outlet_flag","text":"x sf dataframe linestrings crosswalk_id character","code":""},{"path":"/reference/add_is_outlet_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a logical 'is_outlet' flag to a set of transects identifying the most downstream transect — add_is_outlet_flag","text":"sf dataframe transects added is_outlet logical column","code":""},{"path":"/reference/add_length_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a length column to a sf geometry dataframe — add_length_col","title":"Add a length column to a sf geometry dataframe — add_length_col","text":"Add length column sf geometry dataframe","code":""},{"path":"/reference/add_length_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a length column to a sf geometry dataframe — add_length_col","text":"","code":"add_length_col(x, length_col = NULL, add_unit_to_col = FALSE)"},{"path":"/reference/add_length_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a length column to a sf geometry dataframe — add_length_col","text":"x sf dataframe length_col character, name use length column. Default NULL use \"geom_length\" length column name add_unit_to_col logical, whether try extract units geometry append column name. Default FALSE","code":""},{"path":"/reference/add_length_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a length column to a sf geometry dataframe — add_length_col","text":"sf dataframe","code":""},{"path":"/reference/add_needs_rectification.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a ","title":"Add a ","text":"Add \"needs_rectification\" column sf/dataframe","code":""},{"path":"/reference/add_needs_rectification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a ","text":"","code":"add_needs_rectification(transects)"},{"path":"/reference/add_needs_rectification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a ","text":"transects sf linestring \"valid_banks\" \"has_relief\" logical columns","code":""},{"path":"/reference/add_needs_rectification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a ","text":"logical, TRUE transects without valid banks relief","code":""},{"path":"/reference/add_point_type_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the count of each point type as a column to a dataframe of section points — add_point_type_counts","title":"Add the count of each point type as a column to a dataframe of section points — add_point_type_counts","text":"add_point_type_counts() add columns input dataframe counts every point_type hy_id/cs_id input dataframe classified cross section points (output classify_pts())","code":""},{"path":"/reference/add_point_type_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the count of each point type as a column to a dataframe of section points — add_point_type_counts","text":"","code":"add_point_type_counts(classified_pts, crosswalk_id = NULL)"},{"path":"/reference/add_point_type_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the count of each point type as a column to a dataframe of section points — add_point_type_counts","text":"classified_pts dataframe sf dataframe, cross section points \"hy_id\", \"cs_id\" columns well 'point_type' column containing values: \"bottom\", \"left_bank\", \"right_bank\", \"channel\" crosswalk_id character, ID column","code":""},{"path":"/reference/add_point_type_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the count of each point type as a column to a dataframe of section points — add_point_type_counts","text":"dataframe sf dataframe \"<point_type>_count\" columns added","code":""},{"path":"/reference/add_points_per_cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a points per cross section column to an sf dataframe of linestrings given a DEM and min points value — add_points_per_cs","title":"Add a points per cross section column to an sf dataframe of linestrings given a DEM and min points value — add_points_per_cs","text":"function calculates adds column called 'points_per_cs' sf dataframe representing cross-sections (linestrings) based provided DEM minimum points value per cross section.","code":""},{"path":"/reference/add_points_per_cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a points per cross section column to an sf dataframe of linestrings given a DEM and min points value — add_points_per_cs","text":"","code":"add_points_per_cs(   cs,   points_per_cs = NULL,   min_pts_per_cs = 10,   dem = default_dem )"},{"path":"/reference/add_points_per_cs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a points per cross section column to an sf dataframe of linestrings given a DEM and min points value — add_points_per_cs","text":"cs sf dataframe representing cross-sections (linestrings). required cs_lengthm column (length cross section meters) points_per_cs numeric, number points per cross section. Default NULL min_pts_per_cs optional minimum points value per cross section. provided, dem SpatRaster object representing Digital Elevation Model (DEM) character string referencing remote resource. function calculates based length cross-sections resolution DEM.","code":""},{"path":"/reference/add_points_per_cs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a points per cross section column to an sf dataframe of linestrings given a DEM and min points value — add_points_per_cs","text":"updated sf dataframe 'points_per_cs' column added.","code":""},{"path":"/reference/add_powerlaw_bankful_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Add powerlaw_bankful_width column — add_powerlaw_bankful_width","title":"Add powerlaw_bankful_width column — add_powerlaw_bankful_width","text":"Add powerlaw_bankful_width column","code":""},{"path":"/reference/add_powerlaw_bankful_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add powerlaw_bankful_width column — add_powerlaw_bankful_width","text":"","code":"add_powerlaw_bankful_width(df, total_drainage_area_sqkm_col, min_bf_width)"},{"path":"/reference/add_powerlaw_bankful_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add powerlaw_bankful_width column — add_powerlaw_bankful_width","text":"df dataframe total_drainage_area_sqkm_col character, column total downstrream drainage area square kilometers (numeric column) min_bf_width numeric, minimum bankful width value","code":""},{"path":"/reference/add_powerlaw_bankful_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add powerlaw_bankful_width column — add_powerlaw_bankful_width","text":"character, column total downstrream drainage area square kilometers (numeric column)","code":""},{"path":"/reference/add_relief.html","id":null,"dir":"Reference","previous_headings":"","what":"Add relief attributes to a dataframe of cross sections points Given a set of cross section points (derived from hydrofabric3D::cross_section_pts() and hydrofabric3D::classify_points()) add a ","title":"Add relief attributes to a dataframe of cross sections points Given a set of cross section points (derived from hydrofabric3D::cross_section_pts() and hydrofabric3D::classify_points()) add a ","text":"Add relief attributes dataframe cross sections points Given set cross section points (derived hydrofabric3D::cross_section_pts() hydrofabric3D::classify_points()) add \"has_relief\" logical value data. \"has_relief\" value indicating whether cross section \"relief\". Relief determined checking set cross section points left right bank depth difference bottom isgreater equal percentage cross section length (e.g. Assuming 'pct_of_length_for_relief' 0.01 (1%) 100m cross section relief depth threshold 1m)","code":""},{"path":"/reference/add_relief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add relief attributes to a dataframe of cross sections points Given a set of cross section points (derived from hydrofabric3D::cross_section_pts() and hydrofabric3D::classify_points()) add a ","text":"","code":"add_relief(   classified_pts,   crosswalk_id = NULL,   pct_of_length_for_relief = 0.01 )"},{"path":"/reference/add_relief.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add relief attributes to a dataframe of cross sections points Given a set of cross section points (derived from hydrofabric3D::cross_section_pts() and hydrofabric3D::classify_points()) add a ","text":"classified_pts sf dataframe points \"hy_id\", \"cs_id\", \"cs_lengthm\", \"point_type\" columns. Output hydrofabric3D::classify_points() crosswalk_id character, ID column pct_of_length_for_relief numeric, percent cs_lengthm use threshold depth classifying whether cross section \"relief\". Default 0.01 (1% cross sections length).","code":""},{"path":"/reference/add_relief.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add relief attributes to a dataframe of cross sections points Given a set of cross section points (derived from hydrofabric3D::cross_section_pts() and hydrofabric3D::classify_points()) add a ","text":"sf dataframe added \"has_relief\" columns dataframe dataframe unique hy_id/cs_id \"has_relief\"","code":""},{"path":"/reference/add_tmp_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add a new ","title":"Function to add a new ","text":"Internal convenience function creating tmp_id column 2 columns dataframe. Default use hy_id cs_id columns create tmp_id = <hy_id>_<cs_id>.","code":""},{"path":"/reference/add_tmp_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add a new ","text":"","code":"add_tmp_id(df, x = \"hy_id\", y = \"cs_id\")"},{"path":"/reference/add_tmp_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add a new ","text":"df dataframe x y columns x character, column name df make first part added tmp_id column (tmp_id = x_y). Default \"hy_id.\" y character, column name df make second part added tmp_id column (tmp_id = x_y). Default \"cs_id.\"","code":""},{"path":"/reference/add_tmp_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to add a new ","text":"input dataframe \"tmp_id\" column added.","code":""},{"path":"/reference/adjust_flagged_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a flagged set of transects by shortening them by the given extension_distance — adjust_flagged_transects","title":"Update a flagged set of transects by shortening them by the given extension_distance — adjust_flagged_transects","text":"Update flagged set transects shortening given extension_distance","code":""},{"path":"/reference/adjust_flagged_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a flagged set of transects by shortening them by the given extension_distance — adjust_flagged_transects","text":"","code":"adjust_flagged_transects(x, crosswalk_id = NULL, reindex_cs_ids = FALSE)"},{"path":"/reference/adjust_flagged_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a flagged set of transects by shortening them by the given extension_distance — adjust_flagged_transects","text":"x sf dataframe transects crosswalk_id character, unique ID column reindex_cs_ids logical, whether generate new 1-n set cs_ids return original identifiers","code":""},{"path":"/reference/adjust_flagged_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a flagged set of transects by shortening them by the given extension_distance — adjust_flagged_transects","text":"sf dataframe transects updated geometries","code":""},{"path":"/reference/adjust_flagged_transects2.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a flagged set of transects by shortening them by the given left_distance and right_distance (adjust_flagged_transects() v2 ) Requires 'left_distance' and 'right_distance' columns to specify how much to adjust flagged transects by — adjust_flagged_transects2","title":"Update a flagged set of transects by shortening them by the given left_distance and right_distance (adjust_flagged_transects() v2 ) Requires 'left_distance' and 'right_distance' columns to specify how much to adjust flagged transects by — adjust_flagged_transects2","text":"Update flagged set transects shortening given left_distance right_distance (adjust_flagged_transects() v2 ) Requires 'left_distance' 'right_distance' columns specify much adjust flagged transects ","code":""},{"path":"/reference/adjust_flagged_transects2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a flagged set of transects by shortening them by the given left_distance and right_distance (adjust_flagged_transects() v2 ) Requires 'left_distance' and 'right_distance' columns to specify how much to adjust flagged transects by — adjust_flagged_transects2","text":"","code":"adjust_flagged_transects2(x, crosswalk_id = NULL, reindex_cs_ids = FALSE)"},{"path":"/reference/adjust_flagged_transects2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a flagged set of transects by shortening them by the given left_distance and right_distance (adjust_flagged_transects() v2 ) Requires 'left_distance' and 'right_distance' columns to specify how much to adjust flagged transects by — adjust_flagged_transects2","text":"x sf dataframe transects crosswalk_id character, unique ID column reindex_cs_ids logical, whether generate new 1-n set cs_ids return original identifiers","code":""},{"path":"/reference/adjust_flagged_transects2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a flagged set of transects by shortening them by the given left_distance and right_distance (adjust_flagged_transects() v2 ) Requires 'left_distance' and 'right_distance' columns to specify how much to adjust flagged transects by — adjust_flagged_transects2","text":"sf dataframe transects updated geometries","code":""},{"path":"/reference/adjust_transect_lengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend/shrink an sf linestring dataframe by a specified lengths vector — adjust_transect_lengths","title":"Extend/shrink an sf linestring dataframe by a specified lengths vector — adjust_transect_lengths","text":"Extend/shrink sf linestring dataframe specified lengths vector","code":""},{"path":"/reference/adjust_transect_lengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend/shrink an sf linestring dataframe by a specified lengths vector — adjust_transect_lengths","text":"","code":"adjust_transect_lengths(   x,   crosswalk_id = NULL,   dir = \"left\",   length_col = NULL )"},{"path":"/reference/adjust_transect_lengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend/shrink an sf linestring dataframe by a specified lengths vector — adjust_transect_lengths","text":"x linestring sf dataframe, requires crosswalk_id character, unique ID column name dir direction extend/shrink transect , either \"left\" \"right\". Default \"left\". length_col character, name column \"x\" length linestring (meters)","code":""},{"path":"/reference/adjust_transect_lengths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend/shrink an sf linestring dataframe by a specified lengths vector — adjust_transect_lengths","text":"sf dataframe extended linestring geometries","code":""},{"path":"/reference/align_banks_and_bottoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Align banks and smooth bottoms of cross section points — align_banks_and_bottoms","title":"Align banks and smooth bottoms of cross section points — align_banks_and_bottoms","text":"Ensures bottom cross section lower equal one upstream. , traverse network making sure condition met, , cases , lower channel portion cross section make true.","code":""},{"path":"/reference/align_banks_and_bottoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align banks and smooth bottoms of cross section points — align_banks_and_bottoms","text":"","code":"align_banks_and_bottoms(cs_pts, crosswalk_id)"},{"path":"/reference/align_banks_and_bottoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align banks and smooth bottoms of cross section points — align_banks_and_bottoms","text":"cs_pts dataframe sf dataframe classified cross section points (output classify_points()) crosswalk_id character, ID column","code":""},{"path":"/reference/align_banks_and_bottoms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align banks and smooth bottoms of cross section points — align_banks_and_bottoms","text":"sf dataframe cross section points aligned banks smoothed bottoms","code":""},{"path":"/reference/braided_flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Braided Flowlines — braided_flowlines","title":"Braided Flowlines — braided_flowlines","text":"dataset containing flowlines representing braided river sections. flowlines used hydrologic models simulate complex river networks.","code":""},{"path":"/reference/braided_flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Braided Flowlines — braided_flowlines","text":"","code":"braided_flowlines"},{"path":"/reference/braided_flowlines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Braided Flowlines — braided_flowlines","text":"object class sf (inherits tbl_df, tbl, data.frame) 508 rows 39 columns.","code":""},{"path":"/reference/braided_flowlines.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Braided Flowlines — braided_flowlines","text":"Generated using hydrofabric3D software.","code":""},{"path":"/reference/calc_validity_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates a validity score column based on valid_banks and has_relief columns in a set of cross section points — calc_validity_scores","title":"Calculates a validity score column based on valid_banks and has_relief columns in a set of cross section points — calc_validity_scores","text":"Calculates validity score column based valid_banks has_relief columns set cross section points","code":""},{"path":"/reference/calc_validity_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates a validity score column based on valid_banks and has_relief columns in a set of cross section points — calc_validity_scores","text":"","code":"calc_validity_scores(   cs_to_validate,   crosswalk_id = NULL,   validity_col_name = \"validity_score\" )"},{"path":"/reference/calc_validity_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates a validity score column based on valid_banks and has_relief columns in a set of cross section points — calc_validity_scores","text":"cs_to_validate dataframe crosswalk_id character, ID column validity_col_name name output validity score column","code":""},{"path":"/reference/calc_validity_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates a validity score column based on valid_banks and has_relief columns in a set of cross section points — calc_validity_scores","text":"dataframe added validity_score column","code":""},{"path":"/reference/classify_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Cross Section Points (version 3) with NA removal Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points","title":"Classify Cross Section Points (version 3) with NA removal Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points","text":"Classify Cross Section Points (version 3) NA removal Version 2 cross section point classifier function, uses 1st 2nd derivative depths better classify channel points","code":""},{"path":"/reference/classify_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Cross Section Points (version 3) with NA removal Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points","text":"","code":"classify_points(   cs_pts,   crosswalk_id = NULL,   pct_of_length_for_relief = 0.01,   na.rm = TRUE )"},{"path":"/reference/classify_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Cross Section Points (version 3) with NA removal Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points","text":"cs_pts CS points, output hydrofabric3D::cross_section_pts() crosswalk_id character, ID column cs_pts pct_of_length_for_relief numeric, percent cross section length (cs_lengthm) use threshold depth classifying whether cross section \"relief\". cross section least X% length depth, classified \"relief\" (.e. has_relief = TRUE). Value must non negative number (greater equal 0). Default 0.01 (1% cross sections length). na.rm logical, whether remove cross section pts missing Z values (Z = NA). Default TRUE.","code":""},{"path":"/reference/classify_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Cross Section Points (version 3) with NA removal Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points","text":"sf object","code":""},{"path":"/reference/classify_points2.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Cross Section Points (version 2) Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points2","title":"Classify Cross Section Points (version 2) Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points2","text":"Classify Cross Section Points (version 2) Version 2 cross section point classifier function, uses 1st 2nd derivative depths better classify channel points","code":""},{"path":"/reference/classify_points2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Cross Section Points (version 2) Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points2","text":"","code":"classify_points2(cs_pts, crosswalk_id = NULL, pct_of_length_for_relief = 0.01)"},{"path":"/reference/classify_points2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Cross Section Points (version 2) Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points2","text":"cs_pts CS points, output hydrofabric3D::cross_section_pts() crosswalk_id character, ID column cs_pts pct_of_length_for_relief numeric, percent cross section length (cs_lengthm) use threshold depth classifying whether cross section \"relief\". cross section least X% length depth, classified \"relief\" (.e. has_relief = TRUE). Value must non negative number (greater equal 0). Default 0.01 (1% cross sections length).","code":""},{"path":"/reference/classify_points2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Cross Section Points (version 2) Version 2 of cross section point classifier function, uses 1st and 2nd derivative of the depths to better classify channel points — classify_points2","text":"sf object","code":""},{"path":"/reference/classify_points4.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Cross Section Points v1 (Deprecated version) — classify_points4","title":"Classify Cross Section Points v1 (Deprecated version) — classify_points4","text":"Classify Cross Section Points v1 (Deprecated version)","code":""},{"path":"/reference/classify_points4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Cross Section Points v1 (Deprecated version) — classify_points4","text":"","code":"classify_points4(cs_pts)"},{"path":"/reference/classify_points4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Cross Section Points v1 (Deprecated version) — classify_points4","text":"cs_pts CS points","code":""},{"path":"/reference/classify_points4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Cross Section Points v1 (Deprecated version) — classify_points4","text":"sf object","code":""},{"path":"/reference/classify_points5.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Cross Section Points (v1 deprecated) — classify_points5","title":"Classify Cross Section Points (v1 deprecated) — classify_points5","text":"Classify Cross Section Points (v1 deprecated)","code":""},{"path":"/reference/classify_points5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Cross Section Points (v1 deprecated) — classify_points5","text":"","code":"classify_points5(cs_pts, crosswalk_id = NULL, pct_of_length_for_relief = 0.01)"},{"path":"/reference/classify_points5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Cross Section Points (v1 deprecated) — classify_points5","text":"cs_pts CS points, output hydrofabric3D::cross_section_pts() crosswalk_id character, ID column cs_pts pct_of_length_for_relief numeric, percent cross section length (cs_lengthm) use threshold depth classifying whether cross section \"relief\". cross section least X% length depth, classified \"relief\" (.e. has_relief = TRUE). Value must non negative number (greater equal 0). Default 0.01 (1% cross sections length).","code":""},{"path":"/reference/classify_points5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Cross Section Points (v1 deprecated) — classify_points5","text":"sf object","code":""},{"path":"/reference/compare_cs_validity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare valid_banks and has_relief between 2 sets of cross section points — compare_cs_validity","title":"Compare valid_banks and has_relief between 2 sets of cross section points — compare_cs_validity","text":"Compare valid_banks has_relief 2 sets cross section points","code":""},{"path":"/reference/compare_cs_validity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare valid_banks and has_relief between 2 sets of cross section points — compare_cs_validity","text":"","code":"compare_cs_validity(cs_pts1, cs_pts2, crosswalk_id = NULL)"},{"path":"/reference/compare_cs_validity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare valid_banks and has_relief between 2 sets of cross section points — compare_cs_validity","text":"cs_pts1 dataframe sf dataframe CS pts cs_pts2 dataframe sf dataframe CS pts crosswalk_id character unique ID","code":""},{"path":"/reference/compare_cs_validity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare valid_banks and has_relief between 2 sets of cross section points — compare_cs_validity","text":"dataframe, tibble","code":""},{"path":"/reference/cross_section_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Points across transects with elevation values — cross_section_pts","title":"Get Points across transects with elevation values — cross_section_pts","text":"Get Points across transects elevation values","code":""},{"path":"/reference/cross_section_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Points across transects with elevation values — cross_section_pts","text":"","code":"cross_section_pts(   cs = NULL,   crosswalk_id = NULL,   points_per_cs = NULL,   min_pts_per_cs = 10,   dem = default_dem )"},{"path":"/reference/cross_section_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Points across transects with elevation values — cross_section_pts","text":"cs character, Hydrographic LINESTRING Network file path crosswalk_id character, ID column points_per_cs desired number points per CS. NULL, approximately 1 per grid cell resultion DEM selected. min_pts_per_cs Minimum number points per cross section required. dem DEM extract data ","code":""},{"path":"/reference/cross_section_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Points across transects with elevation values — cross_section_pts","text":"sf object cross section points along 'cs' linestring geometries","code":""},{"path":"/reference/cs_arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrange transects / cross sections in order from upstream to downstream — cs_arrange","title":"Rearrange transects / cross sections in order from upstream to downstream — cs_arrange","text":"Rearrange transects / cross sections order upstream downstream","code":""},{"path":"/reference/cs_arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrange transects / cross sections in order from upstream to downstream — cs_arrange","text":"","code":"cs_arrange(x, crosswalk_id = NULL, order_by = c(\"cs_id\", \"cs_measure\"))"},{"path":"/reference/cs_arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrange transects / cross sections in order from upstream to downstream — cs_arrange","text":"x dataframe, sf dataframe tibble crosswalk_id character, unique ID column order_by character, either \"cs_id\" \"cs_measure\"","code":""},{"path":"/reference/cs_arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrange transects / cross sections in order from upstream to downstream — cs_arrange","text":"dataframe, sf dataframe tibble added 'cs_id' column","code":""},{"path":"/reference/cut_cross_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cross Sections Across Hydrographic Network — cut_cross_sections","title":"Generate Cross Sections Across Hydrographic Network — cut_cross_sections","text":"Generate Cross Sections Across Hydrographic Network","code":""},{"path":"/reference/cut_cross_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cross Sections Across Hydrographic Network — cut_cross_sections","text":"","code":"cut_cross_sections(   net,   crosswalk_id = NULL,   cs_widths = 100,   num = 10,   smooth = TRUE,   densify = 2,   rm_self_intersect = TRUE,   fix_braids = FALSE,   braid_threshold = NULL,   braid_method = \"crosswalk_id\",   precision = 1,   add = FALSE,   verbose = TRUE )"},{"path":"/reference/cut_cross_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cross Sections Across Hydrographic Network — cut_cross_sections","text":"net Hydrographic LINESTRING Network crosswalk_id Unique Identifier net cs_widths numeric, Bankfull Widths (length cross sections net element) num numeric, Number transects per Net element smooth logical, whether smooth linestring geometries . Default TRUE. densify numeric, many times points added linestrings. Default 2. rm_self_intersect logical, whether remove self intersecting transect linestrings fix_braids logical, whether fix braided transect lines . TRUE, linestrings part braided network augmented. Default FALSE. braid_threshold numeric value, value total length flowlines braid. braids total flowline lengths less equal threshold considered function (.e. determines maximum braid size fix_braid_transects() operate ). Default NULL, attempt fix braid transects data braid_method method determine geometries cut. Options \"crosswalk_id\", \"component\", \"neighbor\". Default \"crosswalk_id\" precision int, distance meters. applicable fix_braids = TRUE. number meters approximate final cross section linestring length. Increasing value decrease runtime cross section extension algorithm. Value must greater 0. Default 1 add logical indicating whether add original 'net' data outputted transect lines. Default FALSE. verbose logical, whether output messages . Default TRUE, messages given","code":""},{"path":"/reference/cut_cross_sections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cross Sections Across Hydrographic Network — cut_cross_sections","text":"sf object transect linestrings","code":""},{"path":"/reference/cut_transect.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Perpendicular Linestring of a Given Width — cut_transect","title":"Generate a Perpendicular Linestring of a Given Width — cut_transect","text":"Generate Perpendicular Linestring Given Width","code":""},{"path":"/reference/cut_transect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Perpendicular Linestring of a Given Width — cut_transect","text":"","code":"cut_transect(edge, width)"},{"path":"/reference/cut_transect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Perpendicular Linestring of a Given Width — cut_transect","text":"edge geos_geometry LINESTRING width Length Perpendicular LINESTRING","code":""},{"path":"/reference/cut_transect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Perpendicular Linestring of a Given Width — cut_transect","text":"GEOS object","code":""},{"path":"/reference/cycle_edge_list_to_cycle_edge_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_edge_list_to_cycle_edge_df","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_edge_list_to_cycle_edge_df","text":"Convert output find_cycles() dataframe Converts node cycle list dataframe nodes cycle IDs, internal helper function.","code":""},{"path":"/reference/cycle_edge_list_to_cycle_edge_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_edge_list_to_cycle_edge_df","text":"","code":"cycle_edge_list_to_cycle_edge_df(edge_cycles_list, wide = FALSE)"},{"path":"/reference/cycle_edge_list_to_cycle_edge_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_edge_list_to_cycle_edge_df","text":"edge_cycles_list list edges cycle_id (output find_cycles()) wide logical, return data wide dataframe (multiple cycle_ids list row), long dataframe (1 cycle_id row representing node)","code":""},{"path":"/reference/cycle_edge_list_to_cycle_edge_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_edge_list_to_cycle_edge_df","text":"tibble, dataframe","code":""},{"path":"/reference/cycle_node_list_to_cycle_node_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_node_list_to_cycle_node_df","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_node_list_to_cycle_node_df","text":"Convert output find_cycles() dataframe Converts node cycle list dataframe nodes cycle IDs, internal helper function.","code":""},{"path":"/reference/cycle_node_list_to_cycle_node_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_node_list_to_cycle_node_df","text":"","code":"cycle_node_list_to_cycle_node_df(node_cycles_list, wide = FALSE)"},{"path":"/reference/cycle_node_list_to_cycle_node_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_node_list_to_cycle_node_df","text":"node_cycles_list list nodes cycle_id (output find_cycles()) wide logical, return data wide dataframe (multiple cycle_ids list row), long dataframe (1 cycle_id row representing node)","code":""},{"path":"/reference/cycle_node_list_to_cycle_node_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert output of find_cycles() to a dataframe Converts a node cycle list to a dataframe of nodes and cycle IDs, internal helper function. — cycle_node_list_to_cycle_node_df","text":"tibble, dataframe","code":""},{"path":"/reference/dem_based_points_per_cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the points per cross section based off length relative to a DEM Given the length of cross sections and a DEM, approximate the appropriate number of points for each cross section length — dem_based_points_per_cs","title":"Calculate the points per cross section based off length relative to a DEM Given the length of cross sections and a DEM, approximate the appropriate number of points for each cross section length — dem_based_points_per_cs","text":"Calculate points per cross section based length relative DEM Given length cross sections DEM, approximate appropriate number points cross section length","code":""},{"path":"/reference/dem_based_points_per_cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the points per cross section based off length relative to a DEM Given the length of cross sections and a DEM, approximate the appropriate number of points for each cross section length — dem_based_points_per_cs","text":"","code":"dem_based_points_per_cs(cs_length, dem = default_dem)"},{"path":"/reference/dem_based_points_per_cs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the points per cross section based off length relative to a DEM Given the length of cross sections and a DEM, approximate the appropriate number of points for each cross section length — dem_based_points_per_cs","text":"cs_length numeric vector, lengths cross section (meters) dem SpatRaster object representing Digital Elevation Model (DEM) character string referencing remote resource. function calculates based length cross-sections resolution DEM.","code":""},{"path":"/reference/dem_based_points_per_cs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the points per cross section based off length relative to a DEM Given the length of cross sections and a DEM, approximate the appropriate number of points for each cross section length — dem_based_points_per_cs","text":"numeric vector length cs_length, number points per cs_length","code":""},{"path":"/reference/diff_overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Use sf::st_difference to resolve overlaps in polygons based on intersections with other polygons — diff_overlaps","title":"Use sf::st_difference to resolve overlaps in polygons based on intersections with other polygons — diff_overlaps","text":"Use sf::st_difference resolve overlaps polygons based intersections polygons","code":""},{"path":"/reference/diff_overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use sf::st_difference to resolve overlaps in polygons based on intersections with other polygons — diff_overlaps","text":"","code":"diff_overlaps(x)"},{"path":"/reference/diff_overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use sf::st_difference to resolve overlaps in polygons based on intersections with other polygons — diff_overlaps","text":"x sf dataframe","code":""},{"path":"/reference/diff_overlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use sf::st_difference to resolve overlaps in polygons based on intersections with other polygons — diff_overlaps","text":"sf dataframe overlaps removed","code":""},{"path":"/reference/dissolve_overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Use sf::st_union to resolve overlaps in polygons based on intersections with other polygons — dissolve_overlaps","title":"Use sf::st_union to resolve overlaps in polygons based on intersections with other polygons — dissolve_overlaps","text":"Use sf::st_union resolve overlaps polygons based intersections polygons","code":""},{"path":"/reference/dissolve_overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use sf::st_union to resolve overlaps in polygons based on intersections with other polygons — dissolve_overlaps","text":"","code":"dissolve_overlaps(x)"},{"path":"/reference/dissolve_overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use sf::st_union to resolve overlaps in polygons based on intersections with other polygons — dissolve_overlaps","text":"x sf dataframe","code":""},{"path":"/reference/dissolve_overlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use sf::st_union to resolve overlaps in polygons based on intersections with other polygons — dissolve_overlaps","text":"sf dataframe overlaps removed","code":""},{"path":"/reference/drop_incomplete_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove entire cross sections that have any NA Z (depth) values — drop_incomplete_cs_pts","title":"Remove entire cross sections that have any NA Z (depth) values — drop_incomplete_cs_pts","text":"Remove entire cross sections NA Z (depth) values","code":""},{"path":"/reference/drop_incomplete_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove entire cross sections that have any NA Z (depth) values — drop_incomplete_cs_pts","text":"","code":"drop_incomplete_cs_pts(cross_section_pts, crosswalk_id = NULL)"},{"path":"/reference/drop_incomplete_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove entire cross sections that have any NA Z (depth) values — drop_incomplete_cs_pts","text":"cross_section_pts cs points dataframe, tibble, sf dataframe crosswalk_id unique ID flowline","code":""},{"path":"/reference/drop_incomplete_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove entire cross sections that have any NA Z (depth) values — drop_incomplete_cs_pts","text":"cross_section_pts dataframe / tibble / sf dataframe removed cross sections","code":""},{"path":"/reference/extend_by_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend an sf linestring dataframe by a specified lengths vector — extend_by_length","title":"Extend an sf linestring dataframe by a specified lengths vector — extend_by_length","text":"Extend sf linestring dataframe specified lengths vector","code":""},{"path":"/reference/extend_by_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend an sf linestring dataframe by a specified lengths vector — extend_by_length","text":"","code":"extend_by_length(x, crosswalk_id = NULL, length_vector, length_col = NULL)"},{"path":"/reference/extend_by_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend an sf linestring dataframe by a specified lengths vector — extend_by_length","text":"x linestring sf dataframe crosswalk_id character, unique ID column name length_vector numeric, vector length 'x' representing number meters extend 'x' directions (.e. 10 means linestring extended 10m ends line) length_col character, name column \"x\" length linestring (meters)","code":""},{"path":"/reference/extend_by_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend an sf linestring dataframe by a specified lengths vector — extend_by_length","text":"sf dataframe extended linestring geometries","code":""},{"path":"/reference/extend_by_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend an sf linestring dataframe by a percent of the lines length — extend_by_percent","title":"Extend an sf linestring dataframe by a percent of the lines length — extend_by_percent","text":"Extend sf linestring dataframe percent lines length","code":""},{"path":"/reference/extend_by_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend an sf linestring dataframe by a percent of the lines length — extend_by_percent","text":"","code":"extend_by_percent(x, crosswalk_id = NULL, pct = 0.5, length_col = NULL)"},{"path":"/reference/extend_by_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend an sf linestring dataframe by a percent of the lines length — extend_by_percent","text":"x linestring sf dataframe crosswalk_id character, unique ID column name pct numeric, percent line extend linestring directions length_col character, name output length column name. Default NULL create length column name \"geom_length\".","code":""},{"path":"/reference/extend_by_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend an sf linestring dataframe by a percent of the lines length — extend_by_percent","text":"sf dataframe extended linestring geometries","code":""},{"path":"/reference/extend_transects_by_cs_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend transects for any transects with invalid cross section attributes — extend_transects_by_cs_attributes","title":"Extend transects for any transects with invalid cross section attributes — extend_transects_by_cs_attributes","text":"Extend transects transects invalid cross section attributes","code":""},{"path":"/reference/extend_transects_by_cs_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend transects for any transects with invalid cross section attributes — extend_transects_by_cs_attributes","text":"","code":"extend_transects_by_cs_attributes(   transects = NULL,   flowlines = NULL,   crosswalk_id = NULL,   scale = 0.5,   keep_lengths = FALSE,   keep_extension_distances = FALSE,   reindex_cs_ids = FALSE,   verbose = TRUE )"},{"path":"/reference/extend_transects_by_cs_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend transects for any transects with invalid cross section attributes — extend_transects_by_cs_attributes","text":"transects sf dataframe transect LINESTRING geometries flowlines sf dataframe flowline LINESTRING geometries crosswalk_id character scale numeric percent original transect length extend (directions). Default 0.5 50% transects length (.e. 25% increase length directions). keep_lengths logical whether keep record original transect lengths , default FALSE, original lengths kept keep_extension_distances logical whether return extension distance (left_distance right_distance) columns output dataframe. Default FALSE, left_distance right_distance returned output. reindex_cs_ids logical, whether reindex cs_ids ensure crosswalk_id cs_ids 1-number transects. Default FALSE, guarantees crosswalk_id/cs_ids remain untouched given input data. Setting TRUE make sure cross sections removed crosswalk_id, cs_ids renumbered gaps cs_ids within crosswalk_id verbose logical","code":""},{"path":"/reference/extend_transects_by_cs_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend transects for any transects with invalid cross section attributes — extend_transects_by_cs_attributes","text":"dataframe sf dataframe extended transects","code":""},{"path":"/reference/extend_transects_sides.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a set of transect lines, a flowline network, extend the transect lines out given distances from the left and right Flowlines are required to ensure valid transect intersection relationship is maintained — extend_transects_sides","title":"Given a set of transect lines, a flowline network, extend the transect lines out given distances from the left and right Flowlines are required to ensure valid transect intersection relationship is maintained — extend_transects_sides","text":"Given set transect lines, flowline network, extend transect lines given distances left right Flowlines required ensure valid transect intersection relationship maintained","code":""},{"path":"/reference/extend_transects_sides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a set of transect lines, a flowline network, extend the transect lines out given distances from the left and right Flowlines are required to ensure valid transect intersection relationship is maintained — extend_transects_sides","text":"","code":"extend_transects_sides(   transects,   flowlines,   crosswalk_id,   cs_id = \"cs_id\",   grouping_id = \"mainstem\",   direction = \"any\" )"},{"path":"/reference/extend_transects_sides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a set of transect lines, a flowline network, extend the transect lines out given distances from the left and right Flowlines are required to ensure valid transect intersection relationship is maintained — extend_transects_sides","text":"transects sf dataframe linestrings, requires crosswalk_id, cs_id, grouping_id columns numeric 'extension_distance' column indicating distance extend flowlines sf dataframe linestrings crosswalk_id character, column name connects features transects flowlines cs_id character, column name uniquely identifies transects within flowline grouping_id character, column name transects flowlines denotes flowlines grouped transects. direction character, whether extend transects individually left right sides, strictly extend transect left right extension valid. Valid inputs either \"\", \"any_by_specific_distances\", \"\".","code":""},{"path":"/reference/extend_transects_sides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a set of transect lines, a flowline network, extend the transect lines out given distances from the left and right Flowlines are required to ensure valid transect intersection relationship is maintained — extend_transects_sides","text":"transects sf dataframe extended transect geometries, left right distance columns, flags indicating transect extended left /right directions","code":""},{"path":"/reference/extend_transects_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"Give set transecct linestrings poylgons get minimum distance extend transect line (directions, try reach edge \"polygons\") Superseces old version function (now named extend_transects_to_polygons2())","code":""},{"path":"/reference/extend_transects_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"","code":"extend_transects_to_polygons(   transect_lines,   polygons,   flowlines,   crosswalk_id = NULL,   grouping_id = \"mainstem\",   max_extension_distance = 3000,   tolerance = NULL,   keep_lengths = FALSE,   reindex_cs_ids = TRUE,   verbose = TRUE )"},{"path":"/reference/extend_transects_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"transect_lines Set Sf linestrings extend (transect lines ENTIRELLY within polygons) polygons set sf polygons transect lines exteneded flowlines set Sf linestrings crosswalk_id character, flowline ID matches flowlines transect lines. crosswalk_id must appear column flowlines transect_lines. grouping_id character, name column flowlines used group transect 1 flowlines. , transects checked make sure intersect transects flowlines, group ID distinguise flowlines transect checked . intersect_group_id must appear column flowlines transect_lines dataframes max_extension_distance numeric, maximum distance (meters) extend transect line either direction try intersect one \"polygons\". Default 3000m tolerance minimum distance use simplification polygons. Use higher value simplification polygons. Default NULL apply simplification polygons. keep_lengths logical whether keep record original transect lengths , default FALSE, original lengths kept reindex_cs_ids logical, whether reindex cs_ids ensure crosswalk_id cs_ids 1-number transects. Default TRUE, makes sure cross sections removed crosswalk_id, cs_ids renumbered gaps cs_ids within crosswalk_id. Setting FALSE make sure crosswalk_id/cs_ids remain untouched given input data. verbose logical, whether output messages . Default TRUE, messages output","code":""},{"path":"/reference/extend_transects_to_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"sf linestring, extended transect lines","code":""},{"path":"/reference/extend_transects_to_polygons2.html","id":null,"dir":"Reference","previous_headings":"","what":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"Give set transecct linestrings poylgons get minimum distance extend transect line (directions, try reach edge \"polygons\") DEPRECATED VERSION, use extend_transects_to_polygons() WIP/internal function extending transect lines FEMA 100 year flood plain polygons (VERSION 2)","code":""},{"path":"/reference/extend_transects_to_polygons2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"","code":"extend_transects_to_polygons2(   transect_lines,   polygons,   flowlines,   crosswalk_id = \"hy_id\",   grouping_id = \"mainstem\",   max_extension_distance = 3000 )"},{"path":"/reference/extend_transects_to_polygons2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"transect_lines Set Sf linestrigns extend (transect lines ENTIRELLY within polygons) polygons set sf polygons transect lines exteneded flowlines set Sf linestrings crosswalk_id character, flowline ID matches flowlines transect lines. crosswalk_id must appear column flowlines transect_lines. grouping_id character, name column flowlines used group transect 1 flowlines. , transects checked make sure intersect transects flowlines, group ID distinguise flowlines transect checked . intersect_group_id must appear column flowlines transect_lines dataframes max_extension_distance numeric, maximum distance (meters) extend transect line either direction try intersect one \"polygons\". Default 3000m","code":""},{"path":"/reference/extend_transects_to_polygons2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give a set of transecct linestrings and poylgons and get the minimum distance to extend each transect line (from both directions, to try and reach the edge of a ","text":"sf linestring, extended transect lines","code":""},{"path":"/reference/extract_dem_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a set of linestrings, extract DEM values at points along the linestring — extract_dem_values","title":"Given a set of linestrings, extract DEM values at points along the linestring — extract_dem_values","text":"Given set linestrings, extract DEM values points along linestring","code":""},{"path":"/reference/extract_dem_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a set of linestrings, extract DEM values at points along the linestring — extract_dem_values","text":"","code":"extract_dem_values(cs, crosswalk_id = NULL, dem = NULL)"},{"path":"/reference/extract_dem_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a set of linestrings, extract DEM values at points along the linestring — extract_dem_values","text":"cs cross section sf object crosswalk_id character, column name unique flowline / transect ID dem SpatRaster DEM character pointing remote DEM resource","code":""},{"path":"/reference/extract_dem_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a set of linestrings, extract DEM values at points along the linestring — extract_dem_values","text":"sf dataframe Z values extracted DEM","code":""},{"path":"/reference/find_braids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find braided sections of a network and return the unique crosswalk_ids for each idenfied braid — find_braids","title":"Find braided sections of a network and return the unique crosswalk_ids for each idenfied braid — find_braids","text":"Find uniquely identify braids network flowlines, given dataframe containing comid, fromnode, tonode divergence columns. 'find_braids()\" identifies braids cycles graph representation river network.","code":""},{"path":"/reference/find_braids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find braided sections of a network and return the unique crosswalk_ids for each idenfied braid — find_braids","text":"","code":"find_braids(network, crosswalk_id = NULL, nested = TRUE, verbose = FALSE)"},{"path":"/reference/find_braids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find braided sections of a network and return the unique crosswalk_ids for each idenfied braid — find_braids","text":"network network object representing river network. crosswalk_id unique ID column name nested Logical indicating whether output dataframe nested, COMID list braids part . TRUE (Default), braid_id column may contain multiple braid IDs given COMID. FALSE, may duplicate COMIDs single COMID part multiple braids (braid_id) verbose Logical indicating whether display verbose messages braid detection process.","code":""},{"path":"/reference/find_braids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find braided sections of a network and return the unique crosswalk_ids for each idenfied braid — find_braids","text":"dataframe sf dataframe added braid_id","code":""},{"path":"/reference/find_braids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find braided sections of a network and return the unique crosswalk_ids for each idenfied braid — find_braids","text":"","code":"if (FALSE) { # \\dontrun{ net <- nhdplusTools::navigate_network(  start       = 101,  mode        = \"UT\",  distance_km = 100  )    # drop most of the columns in the network dataset net <- dplyr::select(net, comid, divergence, totdasqkm, fromnode, tonode, terminalpa)  # get a dataframe of COMIDs and braid IDs braids <- find_braids(network = net, crosswalk_id = \"comid\")   # returns original data with each braid_id represented # by its individual COMIDs (may contain duplicate COMIDs) nested_braids = find_braids(network   = net,                        crosswalk_id = \"comid\",                        nested    = FALSE                        ) } # }"},{"path":"/reference/find_connected_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the connected components in a NHDPlus flowlines Network — find_connected_components","title":"Find the connected components in a NHDPlus flowlines Network — find_connected_components","text":"Determine many different, unconnected/seperate sets flowlines within set NHDPlus flowlines. input 'network' dataset must contain comid, tonode, fromnode, (optionally) divergence terminalpa attributes. Used internally within 'get_braid_list' 'find_braids()' function make sure connected set flowlines addressed braids searched seperated component.","code":""},{"path":"/reference/find_connected_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the connected components in a NHDPlus flowlines Network — find_connected_components","text":"","code":"find_connected_components(   network,   add = TRUE,   arbitrary = TRUE,   verbose = FALSE )"},{"path":"/reference/find_connected_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the connected components in a NHDPlus flowlines Network — find_connected_components","text":"network data.frame sf object comid, tonode, fromnode, (optionally) divergence terminalpa attributes. \"tocomid\" column exists, recommended remove beforehand add logical, whether add component_id original dataset. TRUE (default) original dataset returned additional component_id column, indicating set connected components comid belongs . FALSE, dataframe COMID component_id returned arbitrary logical, whether use arbitrary numbering components use starting COMID component_id. TRUE (default) components given component ID 1 number components, otherwise (FALSE) arbitrary COMID used component_id flag connected components verbose logical print status updates, TRUE, messages print. Default FALSE.","code":""},{"path":"/reference/find_connected_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the connected components in a NHDPlus flowlines Network — find_connected_components","text":"original dataframe added 'component_id' column (add = TRUE) new dataframe \"comid\" \"component_id\" columns (add = FALSE)","code":""},{"path":"/reference/find_cs_area2.html","id":null,"dir":"Reference","previous_headings":"","what":"Given a specific depth, an array of depths, and relative_distances return the cross sectional area (v2) — find_cs_area2","title":"Given a specific depth, an array of depths, and relative_distances return the cross sectional area (v2) — find_cs_area2","text":"Given specific depth, array depths, relative_distances return cross sectional area (v2)","code":""},{"path":"/reference/find_cs_area2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Given a specific depth, an array of depths, and relative_distances return the cross sectional area (v2) — find_cs_area2","text":"","code":"find_cs_area2(pt_id, depth, depth_array, relative_distance)"},{"path":"/reference/find_cs_area2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Given a specific depth, an array of depths, and relative_distances return the cross sectional area (v2) — find_cs_area2","text":"pt_id numeric index point within CS depth numeric, depth specific point along CS depth_array numeric set depths CS relative_distance numeric vector distances 0 length CS","code":""},{"path":"/reference/find_cs_area2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Given a specific depth, an array of depths, and relative_distances return the cross sectional area (v2) — find_cs_area2","text":"numeric cross sectional area value, 0 area can calculated","code":""},{"path":"/reference/fix_braid_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix transects found on braided river sections — fix_braid_transects","title":"Fix transects found on braided river sections — fix_braid_transects","text":"Fix transects found braided river sections","code":""},{"path":"/reference/fix_braid_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix transects found on braided river sections — fix_braid_transects","text":"","code":"fix_braid_transects(   net,   transect_lines,   terminal_id = NULL,   braid_threshold = NULL,   version = 2,   method = \"comid\",   precision = 1,   rm_intersects = TRUE )"},{"path":"/reference/fix_braid_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix transects found on braided river sections — fix_braid_transects","text":"net sf object NHDplusv2 data transect_lines sf linestring dataframe, containing cross sections flowlines 'net' output \"cut_cross_sections2()\" function terminal_id character, column name containing unique identifier, delineating seperate networks 'network' dataset. Default NULL use 'find_connected_components()' determine connected components graph try create 'component_id' column 'network' braid_threshold numeric value, value total length flowlines braid. braids total flowline lengths less equal threshold considered function (.e. determines maximum braid size fix_braid_transects() operate ). Default NULL, attempt fix braid transects data version integer, version number braid algorithm use, either 1 2. Default 2. method method determine geometries cut. Options \"comid\", \"component\", \"neighbor\". Default \"comid\" precision int, distance meters approximate final cross section linestring length. Value must greater 0. Default 1 rm_intersects logical, whether remove transect linestrings intersect parts network ('net'). Default TRUE remove intersecting linestrings.","code":""},{"path":"/reference/fix_braid_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix transects found on braided river sections — fix_braid_transects","text":"sf object transect linestrings","code":""},{"path":"/reference/fix_braided_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix transects found on braided river sections (latest) — fix_braided_transects","title":"Fix transects found on braided river sections (latest) — fix_braided_transects","text":"Fix transects found braided river sections (latest)","code":""},{"path":"/reference/fix_braided_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix transects found on braided river sections (latest) — fix_braided_transects","text":"","code":"fix_braided_transects(   network,   transect_lines,   crosswalk_id = NULL,   braid_threshold = NULL,   method = \"crosswalk_id\",   precision = 1,   rm_intersects = TRUE )"},{"path":"/reference/fix_braided_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix transects found on braided river sections (latest) — fix_braided_transects","text":"network sf dataframe hydrologic network, linestrings transect_lines sf linestring dataframe, containing cross sections flowlines 'network' output \"cut_cross_sections()\" function crosswalk_id character, unique ID column braid_threshold numeric value, value total length flowlines braid. braids total flowline lengths less equal threshold considered function (.e. determines maximum braid size fix_braid_transects() operate ). Default NULL, attempt fix braid transects data method method determine geometries cut. Options \"crosswalk_id\", \"component\", \"neighbor\". Default \"crosswalk_id\" precision int, distance meters approximate final cross section linestring length. Value must greater 0. Default 1 rm_intersects logical, whether remove transect linestrings intersect parts network ('network'). Default TRUE remove intersecting linestrings.","code":""},{"path":"/reference/fix_braided_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix transects found on braided river sections (latest) — fix_braided_transects","text":"sf object transect linestrings","code":""},{"path":"/reference/flag_transects_for_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a flagged and extension distance columns to set of transects with CS attributes based on new cross section points data — flag_transects_for_change","title":"Add a flagged and extension distance columns to set of transects with CS attributes based on new cross section points data — flag_transects_for_change","text":"Add flagged extension distance columns set transects CS attributes based new cross section points data","code":""},{"path":"/reference/flag_transects_for_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a flagged and extension distance columns to set of transects with CS attributes based on new cross section points data — flag_transects_for_change","text":"","code":"flag_transects_for_change(   x,   crosswalk_id = NULL,   points_per_cs = NULL,   min_pts_per_cs = 10,   dem = default_dem,   pct_of_length_for_relief = 0.01,   na.rm = TRUE )"},{"path":"/reference/flag_transects_for_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a flagged and extension distance columns to set of transects with CS attributes based on new cross section points data — flag_transects_for_change","text":"x sf dataframe transects crosswalk_id character, unique ID column points_per_cs numeric min_pts_per_cs numeric dem character pct_of_length_for_relief numeric na.rm logical, whether remove NAs given cross section points NA comparison points pulled dem. Default TRUE","code":""},{"path":"/reference/flag_transects_for_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a flagged and extension distance columns to set of transects with CS attributes based on new cross section points data — flag_transects_for_change","text":"sf dataframe transects updated geometries","code":""},{"path":"/reference/flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Flowlines — flowlines","title":"Flowlines — flowlines","text":"dataset primary flowlines hydrologic hydraulic modeling.","code":""},{"path":"/reference/flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flowlines — flowlines","text":"","code":"flowlines"},{"path":"/reference/flowlines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Flowlines — flowlines","text":"object class sf (inherits tbl_df, tbl, data.frame) 10 rows 5 columns.","code":""},{"path":"/reference/flowlines.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Flowlines — flowlines","text":"NOAA Office Water Prediction.","code":""},{"path":"/reference/flowlines_missing_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Flowlines Missing Depth — flowlines_missing_depth","title":"Flowlines Missing Depth — flowlines_missing_depth","text":"dataset flowlines missing depth information, may require analysis imputation.","code":""},{"path":"/reference/flowlines_missing_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flowlines Missing Depth — flowlines_missing_depth","text":"","code":"flowlines_missing_depth"},{"path":"/reference/flowlines_missing_depth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Flowlines Missing Depth — flowlines_missing_depth","text":"object class sf (inherits tbl_df, tbl, data.frame) 1 rows 5 columns.","code":""},{"path":"/reference/flowlines_missing_depth.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Flowlines Missing Depth — flowlines_missing_depth","text":"Derived flowlines.","code":""},{"path":"/reference/geos_extend_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a geos_geometry linestring from, one or both ends, by a given distance (meters) — geos_extend_line","title":"Extend a geos_geometry linestring from, one or both ends, by a given distance (meters) — geos_extend_line","text":"Extend geos_geometry linestring , one ends, given distance (meters)","code":""},{"path":"/reference/geos_extend_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a geos_geometry linestring from, one or both ends, by a given distance (meters) — geos_extend_line","text":"","code":"geos_extend_line(line, distance, dir = \"both\", with_crs = TRUE)"},{"path":"/reference/geos_extend_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a geos_geometry linestring from, one or both ends, by a given distance (meters) — geos_extend_line","text":"line sf linestring geos_geometry linestring extend distance numeric value meters vector length 2 'end = \"\"' dir character, determines whether extend linestring 'tail', 'head' '' ends with_crs logical, whether CRS prescribed extended output geos_geometry linestring","code":""},{"path":"/reference/geos_extend_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a geos_geometry linestring from, one or both ends, by a given distance (meters) — geos_extend_line","text":"geos_geometry linestring extended 'distance' either 'head', 'tail' '' ends original linestring","code":""},{"path":"/reference/get_bank_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attributes about the banks of each cross section in a dataframe of cross section points Given a set of cross section points with point_type column, return a dataframe of the unique hy_id/cs_ids with the following calculated columns: ","title":"Get attributes about the banks of each cross section in a dataframe of cross section points Given a set of cross section points with point_type column, return a dataframe of the unique hy_id/cs_ids with the following calculated columns: ","text":"Get attributes banks cross section dataframe cross section points Given set cross section points point_type column, return dataframe unique hy_id/cs_ids following calculated columns: \"bottom\", \"left_bank\", \"right_bank\" columns Z values \"lowest\" bottom point, \"highest\" left right bank Z values, respectively. \"valid_banks\" column indicating whether hy_id/cs_id set cross section point least signle bottom point least 1 left bank point 1 right bank point lowest \"bottom\" point.","code":""},{"path":"/reference/get_bank_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attributes about the banks of each cross section in a dataframe of cross section points Given a set of cross section points with point_type column, return a dataframe of the unique hy_id/cs_ids with the following calculated columns: ","text":"","code":"get_bank_attributes(classified_pts, crosswalk_id = NULL)"},{"path":"/reference/get_bank_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attributes about the banks of each cross section in a dataframe of cross section points Given a set of cross section points with point_type column, return a dataframe of the unique hy_id/cs_ids with the following calculated columns: ","text":"classified_pts sf dataframe points \"hy_id\", \"cs_id\", \"point_type\" columns. Output hydrofabric3D::classify_pts() crosswalk_id character, ID column","code":""},{"path":"/reference/get_bank_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attributes about the banks of each cross section in a dataframe of cross section points Given a set of cross section points with point_type column, return a dataframe of the unique hy_id/cs_ids with the following calculated columns: ","text":"dataframe row unique hy_id/cs_id \"bottom\", \"left_bank\", \"right_bank\", \"valid_banks\" values hy_id/cs_id.","code":""},{"path":"/reference/get_braid_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of braid IDs containing crosswalk_ids in each braid — get_braid_list","title":"Create a list of braid IDs containing crosswalk_ids in each braid — get_braid_list","text":"Find uniquely identify braids network flowlines, given sf dataframe containing crosswalk_id sf linestring geometries, 'find_braids()\" identifies braids cycles graph representation river network.","code":""},{"path":"/reference/get_braid_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of braid IDs containing crosswalk_ids in each braid — get_braid_list","text":"","code":"get_braid_list(network, crosswalk_id = NULL, verbose = FALSE)"},{"path":"/reference/get_braid_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of braid IDs containing crosswalk_ids in each braid — get_braid_list","text":"network network object representing river network. crosswalk_id unique ID column name verbose Logical indicating whether display verbose messages braid detection process.","code":""},{"path":"/reference/get_braid_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of braid IDs containing crosswalk_ids in each braid — get_braid_list","text":"list braid IDs COMIDs within braid","code":""},{"path":"/reference/get_braid_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of braid IDs containing crosswalk_ids in each braid — get_braid_list","text":"","code":"if (FALSE) { # \\dontrun{ net <- nhdplusTools::navigate_network(  start       = 101,  mode        = \"UT\",  distance_km = 100  )   net <- dplyr::select(net, comid, divergence, totdasqkm, fromnode, tonode, terminalpa)  # get a dataframe of COMIDs and braid IDs braids <- get_braid_list(network = net, crosswalk_id = \"comid\") } # }"},{"path":"/reference/get_cs_bottom_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the length between the leftmost and rightmost bottom point in each cross section — get_cs_bottom_length","title":"Calculate the length between the leftmost and rightmost bottom point in each cross section — get_cs_bottom_length","text":"Calculate length leftmost rightmost bottom point cross section","code":""},{"path":"/reference/get_cs_bottom_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the length between the leftmost and rightmost bottom point in each cross section — get_cs_bottom_length","text":"","code":"get_cs_bottom_length(cross_section_pts, crosswalk_id = NULL)"},{"path":"/reference/get_cs_bottom_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the length between the leftmost and rightmost bottom point in each cross section — get_cs_bottom_length","text":"cross_section_pts dataframe, sf dataframe cross section points crosswalk_id character, ID column","code":""},{"path":"/reference/get_cs_bottom_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the length between the leftmost and rightmost bottom point in each cross section — get_cs_bottom_length","text":"summarized dataframe input cross_section_pts dataframe bottom_length value hy_id/cs_id","code":""},{"path":"/reference/get_extensions_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the left and right extension distances for a set of transects out to a set of polygons — get_extensions_by_id","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_extensions_by_id","text":"Get left right extension distances set transects set polygons","code":""},{"path":"/reference/get_extensions_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_extensions_by_id","text":"","code":"get_extensions_by_id(transects, polygons, crosswalk_id, max_extension_distance)"},{"path":"/reference/get_extensions_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_extensions_by_id","text":"transects sf linestring dataframe polygons sf polygon dataframe crosswalk_id character max_extension_distance numeric","code":""},{"path":"/reference/get_extensions_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_extensions_by_id","text":"data.frame tibble","code":""},{"path":"/reference/get_improved_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and fix cross section points with limited variation in Z values (without removing any flowlines) — get_improved_cs_pts","title":"Check and fix cross section points with limited variation in Z values (without removing any flowlines) — get_improved_cs_pts","text":"Duplicate process rectify_cs() remove cross sections, attempts extend transects improve cross sections. function takes set cross section points (cs_pts), flowline network (net) set transects lines flowline network (transects). function assumes cross section points classified via \"classify_points()\" \"has_relief\" \"valid_banks\" logical columns. function look cross section points either relief valid banks, transect lines generated cross section points extended new points extracted along newly extended, longer transect line. newly extracted points checked relief valid banks removed still relief valid banks. new points became valid result extension process added original dataset rectified set cross section points returned \"is_extended\" logical flag, indicating transect line generated cross section points extended. Improved function rectifying cross section points flat Z values extending transect lines reevaluating new DEM values.","code":""},{"path":"/reference/get_improved_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and fix cross section points with limited variation in Z values (without removing any flowlines) — get_improved_cs_pts","text":"","code":"get_improved_cs_pts(   cs_pts = NULL,   net = NULL,   transects = NULL,   crosswalk_id = NULL,   points_per_cs = NULL,   min_pts_per_cs = 10,   dem = default_dem,   scale = 0.5,   pct_of_length_for_relief = 0.01,   fix_ids = FALSE,   verbose = TRUE )"},{"path":"/reference/get_improved_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and fix cross section points with limited variation in Z values (without removing any flowlines) — get_improved_cs_pts","text":"cs_pts sf dataframe dataframe cross section points cross_section_pts() followed classify_points() net Hydrographic LINESTRING Network transects character, Hydrographic LINESTRING transects along hydrographic (net) network crosswalk_id character, ID column uniquely identifies crosswalks features 'net', 'transects' 'cs_pts' points_per_cs desired number points per CS. NULL, approximently 1 per grid cell resultion DEM selected. min_pts_per_cs Minimun number points per cross section required. dem DEM extract data scale numeric, transect line DEM extraction results equal Z values, percent transect lines length (meters) transect line extended directions try capture representative Z values ? Default 0.5 (50% transect length) pct_of_length_for_relief numeric, percent cs_lengthm use threshold depth classifying whether cross section \"relief\". Default 0.01 (1% cross sections length). fix_ids logical, whether reenumerate \"cs_id\" column make sure cross sections number 1 - number total cross sections flowline.  Default FALSE, cs_id kept input data may contain gaps cs_ids within flowline (hy_id). WARNING: Setting fix_ids = TRUE may result input cross section points (cross_section_pts) DIFFERENT cs_id values input transects (cs) inconsistency can cause problems trying cross walk datasets future. verbose logical, whether print messages . Default TRUE","code":""},{"path":"/reference/get_improved_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and fix cross section points with limited variation in Z values (without removing any flowlines) — get_improved_cs_pts","text":"sf object cross section points based extended transects try improve number points \"valid_banks\" \"has_relief\"","code":""},{"path":"/reference/get_point_type_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the count of each point type in a set of cross section points — get_point_type_counts","title":"Get the count of each point type in a set of cross section points — get_point_type_counts","text":"get_point_type_counts() create dataframe providing counts every point_type hy_id/cs_id set classified cross section points (output classify_pts())","code":""},{"path":"/reference/get_point_type_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the count of each point type in a set of cross section points — get_point_type_counts","text":"","code":"get_point_type_counts(classified_pts, crosswalk_id = NULL)"},{"path":"/reference/get_point_type_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the count of each point type in a set of cross section points — get_point_type_counts","text":"classified_pts dataframe sf dataframe, cross section points \"hy_id\", \"cs_id\" columns well 'point_type' column containing values: \"bottom\", \"left_bank\", \"right_bank\", \"channel\" crosswalk_id character, ID column","code":""},{"path":"/reference/get_point_type_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the count of each point type in a set of cross section points — get_point_type_counts","text":"dataframe sf dataframe hy_id, cs_id, <point_type>_count columns point_type","code":""},{"path":"/reference/get_points_per_cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the points per cross section based off length — get_points_per_cs","title":"Calculate the points per cross section based off length — get_points_per_cs","text":"Calculate points per cross section based length","code":""},{"path":"/reference/get_points_per_cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the points per cross section based off length — get_points_per_cs","text":"","code":"get_points_per_cs(   cs_length,   points_per_cs = NULL,   min_pts_per_cs = 10,   dem = default_dem )"},{"path":"/reference/get_points_per_cs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the points per cross section based off length — get_points_per_cs","text":"cs_length numeric vector, lengths cross section (meters) points_per_cs numeric, number points per cross section. Default NULL min_pts_per_cs optional minimum points value per cross section. provided, dem SpatRaster object representing Digital Elevation Model (DEM) character string referencing remote resource. function calculates based length cross-sections resolution DEM.","code":""},{"path":"/reference/get_points_per_cs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the points per cross section based off length — get_points_per_cs","text":"numeric vector, indicating number points per cross section cs_length","code":""},{"path":"/reference/get_relief.html","id":null,"dir":"Reference","previous_headings":"","what":"Get relief attributes from a dataframe of cross sections points Generate a dataframe from a set of classified cross section points indicating whether a cross section ","title":"Get relief attributes from a dataframe of cross sections points Generate a dataframe from a set of classified cross section points indicating whether a cross section ","text":"Get relief attributes dataframe cross sections points Generate dataframe set classified cross section points indicating whether cross section \"relief\". Relief determined checking set cross section points left right bank depth difference bottom greater equal percentage cross section length (e.g. Assuming 'pct_of_length_for_relief' 0.01 (1%) 100m cross section relief depth threshold 1m)","code":""},{"path":"/reference/get_relief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get relief attributes from a dataframe of cross sections points Generate a dataframe from a set of classified cross section points indicating whether a cross section ","text":"","code":"get_relief(   classified_pts,   crosswalk_id = NULL,   pct_of_length_for_relief = 0.01,   detailed = FALSE )"},{"path":"/reference/get_relief.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get relief attributes from a dataframe of cross sections points Generate a dataframe from a set of classified cross section points indicating whether a cross section ","text":"classified_pts sf dataframe points \"hy_id\", \"cs_id\", \"cs_lengthm\", \"point_type\" columns. Output hydrofabric3D::classify_pts() crosswalk_id character, ID column pct_of_length_for_relief numeric, percent cs_lengthm use threshold depth classifying whether cross section \"relief\". Default 0.01 (1% cross sections length). detailed logical, whether return \"has_relief\" column include derived relief based columns \"max_relief\" \"pct_of_length_for_relief\" used. Default FALSE returns dataframe \"hy_id\", \"cs_id\", \"has_relief\".","code":""},{"path":"/reference/get_relief.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get relief attributes from a dataframe of cross sections points Generate a dataframe from a set of classified cross section points indicating whether a cross section ","text":"dataframe row unique hy_id/cs_id \"has_relief\" value hy_id/cs_id. detailed = TRUE, output dataframe include following additional columns: \"cs_lengthm\", \"max_relief\", \"pct_of_length_for_relief\".","code":""},{"path":"/reference/get_start_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a valid starting node from a graph — get_start_node","title":"Get a valid starting node from a graph — get_start_node","text":"Get valid starting node graph","code":""},{"path":"/reference/get_start_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a valid starting node from a graph — get_start_node","text":"","code":"get_start_node(graph, start = NULL)"},{"path":"/reference/get_start_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a valid starting node from a graph — get_start_node","text":"graph dataframe, sf dataframe, fromnode tonode columns start character, node 'fromnode' column graph","code":""},{"path":"/reference/get_start_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a valid starting node from a graph — get_start_node","text":"character, node","code":""},{"path":"/reference/get_transect_extension_distances_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the left and right extension distances for a set of transects out to a set of polygons — get_transect_extension_distances_to_polygons","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_transect_extension_distances_to_polygons","text":"Get left right extension distances set transects set polygons","code":""},{"path":"/reference/get_transect_extension_distances_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_transect_extension_distances_to_polygons","text":"","code":"get_transect_extension_distances_to_polygons(   transects,   polygons,   crosswalk_id,   max_extension_distance,   tolerance = NULL,   verbose = TRUE )"},{"path":"/reference/get_transect_extension_distances_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_transect_extension_distances_to_polygons","text":"transects sf linestring dataframe polygons sf polygon dataframe crosswalk_id character max_extension_distance numeric tolerance minimum distance use simplification polygons. Use higher value simplification polygons. Default NULL apply simplification polygons. verbose logical, whether output messages . Default TRUE, messages output","code":""},{"path":"/reference/get_transect_extension_distances_to_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the left and right extension distances for a set of transects out to a set of polygons — get_transect_extension_distances_to_polygons","text":"data.frame tibble","code":""},{"path":"/reference/get_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Multiple cross section along a linestring — get_transects","title":"Generate Multiple cross section along a linestring — get_transects","text":"Generate Multiple cross section along linestring","code":""},{"path":"/reference/get_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Multiple cross section along a linestring — get_transects","text":"","code":"get_transects(line, bf_width, n)"},{"path":"/reference/get_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Multiple cross section along a linestring — get_transects","text":"line sf linestring geos_geometry, original line element bf_width Bankfull Width (length cross section) n number cross sections","code":""},{"path":"/reference/get_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Multiple cross section along a linestring — get_transects","text":"sf dataframe 'n' evenly spaced transect lines cs_measures cross section geometry","code":""},{"path":"/reference/get_unique_tmp_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of unique tmp_ids in a dataframe — get_unique_tmp_ids","title":"Get a list of unique tmp_ids in a dataframe — get_unique_tmp_ids","text":"Dataframe can \"tmp_id\" column already columns can specified 'x' 'y' arguments","code":""},{"path":"/reference/get_unique_tmp_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of unique tmp_ids in a dataframe — get_unique_tmp_ids","text":"","code":"get_unique_tmp_ids(df, x = \"hy_id\", y = \"cs_id\")"},{"path":"/reference/get_unique_tmp_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of unique tmp_ids in a dataframe — get_unique_tmp_ids","text":"df dataframe x y columns, optional \"tmp_id\" column, otherwise tmp_id created x_y x name column df make first part added tmp_id column (tmp_id = x_y). Default hy_id. y name column df make second part added tmp_id column (tmp_id = x_y). Default cs_id.","code":""},{"path":"/reference/get_unique_tmp_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of unique tmp_ids in a dataframe — get_unique_tmp_ids","text":"character vector unique \"tmp_id\" values given dataframe","code":""},{"path":"/reference/get_validity_tally.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a total count of the validity attributes — get_validity_tally","title":"Get a total count of the validity attributes — get_validity_tally","text":"Get total count validity attributes","code":""},{"path":"/reference/get_validity_tally.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a total count of the validity attributes — get_validity_tally","text":"","code":"get_validity_tally(x, crosswalk_id = NULL)"},{"path":"/reference/get_validity_tally.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a total count of the validity attributes — get_validity_tally","text":"x dataframe sf dataframe crosswalk_id, has_relief, valid_banks columns crosswalk_id character unique ID column","code":""},{"path":"/reference/get_validity_tally.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a total count of the validity attributes — get_validity_tally","text":"dataframe tibble","code":""},{"path":"/reference/invalid_flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Invalid Flowlines — invalid_flowlines","title":"Invalid Flowlines — invalid_flowlines","text":"dataset flowlines identified invalid due self-intersections topological errors.","code":""},{"path":"/reference/invalid_flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invalid Flowlines — invalid_flowlines","text":"","code":"invalid_flowlines"},{"path":"/reference/invalid_flowlines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Invalid Flowlines — invalid_flowlines","text":"object class sf (inherits tbl_df, tbl, data.frame) 2 rows 5 columns.","code":""},{"path":"/reference/invalid_flowlines.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Invalid Flowlines — invalid_flowlines","text":"Processed using rm_self_intersections.","code":""},{"path":"/reference/is_braided.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect whether a braid exists in a hydrologic network Check if if a hydrologic network dataset contains any braids. If multiple discontinuous networks are within the 'network' data. The function will try to infer the distinct networks and then check for braids in each component (using find_connected_components()). — is_braided","title":"Detect whether a braid exists in a hydrologic network Check if if a hydrologic network dataset contains any braids. If multiple discontinuous networks are within the 'network' data. The function will try to infer the distinct networks and then check for braids in each component (using find_connected_components()). — is_braided","text":"Detect whether braid exists hydrologic network Check hydrologic network dataset contains braids. multiple discontinuous networks within 'network' data. function try infer distinct networks check braids component (using find_connected_components()).","code":""},{"path":"/reference/is_braided.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect whether a braid exists in a hydrologic network Check if if a hydrologic network dataset contains any braids. If multiple discontinuous networks are within the 'network' data. The function will try to infer the distinct networks and then check for braids in each component (using find_connected_components()). — is_braided","text":"","code":"is_braided(network, crosswalk_id = NULL, recycle = FALSE, verbose = FALSE)"},{"path":"/reference/is_braided.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect whether a braid exists in a hydrologic network Check if if a hydrologic network dataset contains any braids. If multiple discontinuous networks are within the 'network' data. The function will try to infer the distinct networks and then check for braids in each component (using find_connected_components()). — is_braided","text":"network sf data.frame linestrings unique <crosswalk_id> attribute. crosswalk_id unique ID column name recycle logical, whether return logical vector recycled length number unique networks (disconnected networks/outlets/terminalpa). FALSE (default), function returns TRUE networks contain braid. Otherwise, TRUE, function attempts distinguish different/separate network components returns logical vector length number connected components network. verbose logical print status updates, TRUE, messages print. Default FALSE.","code":""},{"path":"/reference/is_braided.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect whether a braid exists in a hydrologic network Check if if a hydrologic network dataset contains any braids. If multiple discontinuous networks are within the 'network' data. The function will try to infer the distinct networks and then check for braids in each component (using find_connected_components()). — is_braided","text":"logical, TRUE, least one braid detected network, FALSE braids found. multiple components found terminal_id column given, unique network checked braiding (recycles length unique \"terminal_id\")","code":""},{"path":"/reference/junction_flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Junction Flowlines — junction_flowlines","title":"Junction Flowlines — junction_flowlines","text":"dataset flowlines representing junctions river network, used hydrodynamic connectivity analysis.","code":""},{"path":"/reference/junction_flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Junction Flowlines — junction_flowlines","text":"","code":"junction_flowlines"},{"path":"/reference/junction_flowlines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Junction Flowlines — junction_flowlines","text":"object class sf (inherits tbl_df, tbl, data.frame) 5 rows 5 columns.","code":""},{"path":"/reference/junction_flowlines.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Junction Flowlines — junction_flowlines","text":"Derived flowlines.","code":""},{"path":"/reference/linestring.html","id":null,"dir":"Reference","previous_headings":"","what":"Tester — linestring","title":"Tester — linestring","text":"Tester","code":""},{"path":"/reference/linestring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tester — linestring","text":"","code":"linestring"},{"path":"/reference/linestring.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tester — linestring","text":"object class sf (inherits tbl_df, tbl, data.frame) 325 rows 5 columns.","code":""},{"path":"/reference/needs_rectification.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there transects without valid banks or relief — needs_rectification","title":"Check if there transects without valid banks or relief — needs_rectification","text":"Check transects without valid banks relief","code":""},{"path":"/reference/needs_rectification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there transects without valid banks or relief — needs_rectification","text":"","code":"needs_rectification(transects)"},{"path":"/reference/needs_rectification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there transects without valid banks or relief — needs_rectification","text":"transects sf linestring \"valid_banks\" \"has_relief\" logical columns","code":""},{"path":"/reference/needs_rectification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there transects without valid banks or relief — needs_rectification","text":"logical, TRUE transects without valid banks relief","code":""},{"path":"/reference/nextgen_braided_flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"NextGen Braided Flowlines — nextgen_braided_flowlines","title":"NextGen Braided Flowlines — nextgen_braided_flowlines","text":"dataset braided flowlines compatible NextGen hydrologic prediction system.","code":""},{"path":"/reference/nextgen_braided_flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextGen Braided Flowlines — nextgen_braided_flowlines","text":"","code":"nextgen_braided_flowlines"},{"path":"/reference/nextgen_braided_flowlines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NextGen Braided Flowlines — nextgen_braided_flowlines","text":"object class sf (inherits tbl_df, tbl, data.frame) 183 rows 11 columns.","code":""},{"path":"/reference/nextgen_braided_flowlines.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NextGen Braided Flowlines — nextgen_braided_flowlines","text":"Created using hydrofabric3D.","code":""},{"path":"/reference/pct_pts_near_bottom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate percentage of points within a set of cross section points that are near the bottom of the cross section\nAdds the following columns:\nis_near_bottom: state whether a point is near the bottom of the cross section (within a specified distance threshold of the bottom),\npts_near_bottom: count of points near the bottom of the cross section\npct_near_bottom: percent of points near the bottom of the cross section — pct_pts_near_bottom","title":"Calculate percentage of points within a set of cross section points that are near the bottom of the cross section\nAdds the following columns:\nis_near_bottom: state whether a point is near the bottom of the cross section (within a specified distance threshold of the bottom),\npts_near_bottom: count of points near the bottom of the cross section\npct_near_bottom: percent of points near the bottom of the cross section — pct_pts_near_bottom","text":"Calculate percentage points within set cross section points near bottom cross section Adds following columns: is_near_bottom: state whether point near bottom cross section (within specified distance threshold bottom), pts_near_bottom: count points near bottom cross section pct_near_bottom: percent points near bottom cross section","code":""},{"path":"/reference/pct_pts_near_bottom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate percentage of points within a set of cross section points that are near the bottom of the cross section\nAdds the following columns:\nis_near_bottom: state whether a point is near the bottom of the cross section (within a specified distance threshold of the bottom),\npts_near_bottom: count of points near the bottom of the cross section\npct_near_bottom: percent of points near the bottom of the cross section — pct_pts_near_bottom","text":"","code":"pct_pts_near_bottom(   cs_pts,   distance_from_bottom = 1,   look_only_above_bottom = TRUE,   total_from_bottom_up = FALSE )"},{"path":"/reference/pct_pts_near_bottom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate percentage of points within a set of cross section points that are near the bottom of the cross section\nAdds the following columns:\nis_near_bottom: state whether a point is near the bottom of the cross section (within a specified distance threshold of the bottom),\npts_near_bottom: count of points near the bottom of the cross section\npct_near_bottom: percent of points near the bottom of the cross section — pct_pts_near_bottom","text":"cs_pts sf dataframe cross section points (output cross_section_pts() function) distance_from_bottom numeric, distance threshold (meters) determine point near bottom cross section look_only_above_bottom logical, whether look points channel bottom points can classified \"near bottom\". total_from_bottom_up logical, whether use points bottom points part total points calculating percentage points near bottom. Default FALSE points used calculating percentage, even point Z value bottom, classified bottom point","code":""},{"path":"/reference/pct_pts_near_bottom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate percentage of points within a set of cross section points that are near the bottom of the cross section\nAdds the following columns:\nis_near_bottom: state whether a point is near the bottom of the cross section (within a specified distance threshold of the bottom),\npts_near_bottom: count of points near the bottom of the cross section\npct_near_bottom: percent of points near the bottom of the cross section — pct_pts_near_bottom","text":"sf dataframe cross section points added columns described ","code":""},{"path":"/reference/plot_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots an X-Y scatter plot of cross section points — plot_cs_pts","title":"Plots an X-Y scatter plot of cross section points — plot_cs_pts","text":"Plots X-Y scatter plot cross section points","code":""},{"path":"/reference/plot_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots an X-Y scatter plot of cross section points — plot_cs_pts","text":"","code":"plot_cs_pts(   cs_pts,   crosswalk_id = NULL,   x = \"pt_id\",   y = \"Z\",   color = NULL,   size = 1,   grid = FALSE,   scales = \"free_y\" )"},{"path":"/reference/plot_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots an X-Y scatter plot of cross section points — plot_cs_pts","text":"cs_pts data.frame cross section points columns hy_id, cs_id columns X Y axises (.e. \"pt_id\", \"Z\") crosswalk_id unique ID column name x character name column cs_pts use X axis y character name column cs_pts use Y axis color character name column cs_pts color points plot size numeric, size cs points, default 1 grid logical, TRUE use facet_grid, otherwise use facet_wrap. Default FALSE (uses facet_wrap) scales scales fixed (\"fixed\", default), free (\"free\"), free one dimension (\"free_x\", \"free_y\")?","code":""},{"path":"/reference/plot_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots an X-Y scatter plot of cross section points — plot_cs_pts","text":"ggplot2 object","code":""},{"path":"/reference/prep_flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare flowlines have a more dense and/or smoother surface for cutting transects — prep_flowlines","title":"Prepare flowlines have a more dense and/or smoother surface for cutting transects — prep_flowlines","text":"Prepare flowlines dense /smoother surface cutting transects","code":""},{"path":"/reference/prep_flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare flowlines have a more dense and/or smoother surface for cutting transects — prep_flowlines","text":"","code":"prep_flowlines(flowlines, densify = NULL, smooth = FALSE, verbose = TRUE)"},{"path":"/reference/prep_flowlines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare flowlines have a more dense and/or smoother surface for cutting transects — prep_flowlines","text":"flowlines sf dataframe flowline linestrings densify numeric, NULL, densification happens. Default NULL smooth logical, whether smooth linestrings verbose logical","code":""},{"path":"/reference/prep_flowlines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare flowlines have a more dense and/or smoother surface for cutting transects — prep_flowlines","text":"sf dataframe","code":""},{"path":"/reference/pts_to_XY.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an sf dataframe with a point geometry column to non spatial with XY columns — pts_to_XY","title":"Convert an sf dataframe with a point geometry column to non spatial with XY columns — pts_to_XY","text":"Convert sf dataframe point geometry column non spatial XY columns","code":""},{"path":"/reference/pts_to_XY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an sf dataframe with a point geometry column to non spatial with XY columns — pts_to_XY","text":"","code":"pts_to_XY(pts)"},{"path":"/reference/pts_to_XY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an sf dataframe with a point geometry column to non spatial with XY columns — pts_to_XY","text":"pts sf dataframe points","code":""},{"path":"/reference/pts_to_XY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an sf dataframe with a point geometry column to non spatial with XY columns — pts_to_XY","text":"data.frame tibble added X Y columns","code":""},{"path":"/reference/pts_to_reevaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a dataframe of points that should be evaluated due to their proximity (nearness in Z distance) to the bottom — pts_to_reevaluate","title":"Get a dataframe of points that should be evaluated due to their proximity (nearness in Z distance) to the bottom — pts_to_reevaluate","text":"Get dataframe points evaluated due proximity (nearness Z distance) bottom","code":""},{"path":"/reference/pts_to_reevaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a dataframe of points that should be evaluated due to their proximity (nearness in Z distance) to the bottom — pts_to_reevaluate","text":"","code":"pts_to_reevaluate(cs_pts, threshold = 1, pct_threshold = 0.99)"},{"path":"/reference/pts_to_reevaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a dataframe of points that should be evaluated due to their proximity (nearness in Z distance) to the bottom — pts_to_reevaluate","text":"cs_pts dataframe/sf dataframe cross section points (requires hy_id, cs_id, Z values) threshold numeric, threshold distance meters points considered \"near bottom\". Default 1 meter (.e. check points within 1 meter bottom) pct_threshold numeric, threshold percent points cross section within threshold bottom determine whether point considered re evaluation. Default 0.99 (.e. 99% points near bottom). Default 0.99 (.e. 99&%).","code":""},{"path":"/reference/pts_to_reevaluate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a dataframe of points that should be evaluated due to their proximity (nearness in Z distance) to the bottom — pts_to_reevaluate","text":"dataframe hy_id, cs_id, pts_near_bottom (count pts_near_bottom), pct_near_bottom (% points cross section near bottom). empty dataframe returned ZERO points classified \"near bottom\"","code":""},{"path":"/reference/rectify_flat_cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and fix cross section points with limited variation in Z values (version 2 latest)\nThis function takes in a set of cross section points (cs_pts), a flowline network (net) and a set of transects lines for that flowline network (cs).\nThe function that looks at the cross section points and identifies cross sections that are ","title":"Check and fix cross section points with limited variation in Z values (version 2 latest)\nThis function takes in a set of cross section points (cs_pts), a flowline network (net) and a set of transects lines for that flowline network (cs).\nThe function that looks at the cross section points and identifies cross sections that are ","text":"Check fix cross section points limited variation Z values (version 2 latest) function takes set cross section points (cs_pts), flowline network (net) set transects lines flowline network (cs). function looks cross section points identifies cross sections \"flat\" (percent points cross section within threshold distance bottom cross section). transect lines generated \"flat\" cross section points extended new points extracted along new longer transect line. newly extracted points checked \"flatness\" removed still \"flat\", otherwise original dataset points updated new set point derived extended transect line. Improved function rectifying cross section points flat Z values extending transect lines reevaluating new DEM values.","code":""},{"path":"/reference/rectify_flat_cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and fix cross section points with limited variation in Z values (version 2 latest)\nThis function takes in a set of cross section points (cs_pts), a flowline network (net) and a set of transects lines for that flowline network (cs).\nThe function that looks at the cross section points and identifies cross sections that are ","text":"","code":"rectify_flat_cs(   cs_pts = NULL,   net = NULL,   cs = NULL,   points_per_cs = NULL,   min_pts_per_cs = 10,   dem =     \"/vsicurl/https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/13/TIFF/USGS_Seamless_DEM_13.vrt\",   scale = 0.5,   threshold = 0,   pct_threshold = 0.99,   fix_ids = FALSE )"},{"path":"/reference/rectify_flat_cs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and fix cross section points with limited variation in Z values (version 2 latest)\nThis function takes in a set of cross section points (cs_pts), a flowline network (net) and a set of transects lines for that flowline network (cs).\nThe function that looks at the cross section points and identifies cross sections that are ","text":"cs_pts Output extract_dem_values_first net Hydrographic LINESTRING Network cs character, Hydrographic LINESTRING Network file path points_per_cs desired number points per CS. NULL, approximently 1 per grid cell resultion DEM selected. min_pts_per_cs Minimun number points per cross section required. dem DEM extract data scale numeric, transect line DEM extraction results equal Z values, percent transect lines length (meters) transect line extended directions try capture representative Z values ? Default 0.5 (50% transect length) threshold numeric, threshold Z value (meters) determines cross section flat. threshold = 0 means Z values , cross section considered flat. threshold value 1 means cross section Z values within 1 meter eachother, considered flat. Default 0. pct_threshold numeric, threshold percent points cross section within threshold bottom determine whether point considered re evaluation. Default 0.99 (.e. 99% points near bottom) fix_ids logical, whether reenumerate \"cs_id\" column make sure cross sections number 1 - number total cross sections flowline.  Default FALSE, cs_id kept input data may contain gaps cs_ids within flowline (hy_id). WARNING: Setting fix_ids = TRUE may result input cross section points (cs_pts) DIFFERENT cs_id values input transects (cs) inconsistency can cause problems trying cross walk datasets future.","code":""},{"path":"/reference/rectify_flat_cs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and fix cross section points with limited variation in Z values (version 2 latest)\nThis function takes in a set of cross section points (cs_pts), a flowline network (net) and a set of transects lines for that flowline network (cs).\nThe function that looks at the cross section points and identifies cross sections that are ","text":"sf object cs_pts \"flat\" cross sections removed/updated longer transects capture Z data","code":""},{"path":"/reference/rectify_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a summaru dataframe and print out of differences between 2 cross section points dataframes — rectify_summary","title":"Makes a summaru dataframe and print out of differences between 2 cross section points dataframes — rectify_summary","text":"Convenience function printing difference cross section point dataframe resulting output putting dataframe rectify_cs() function","code":""},{"path":"/reference/rectify_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a summaru dataframe and print out of differences between 2 cross section points dataframes — rectify_summary","text":"","code":"rectify_summary(   input_points,   output_points,   crosswalk_id = NULL,   verbose = TRUE )"},{"path":"/reference/rectify_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a summaru dataframe and print out of differences between 2 cross section points dataframes — rectify_summary","text":"input_points sf dataframe dataframe cross section points output_points sf dataframe dataframe cross section points, \"is_extended\" logical column crosswalk_id character, Unique ID column name verbose logical, whether print summary message/ Default TRUE","code":""},{"path":"/reference/rectify_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a summaru dataframe and print out of differences between 2 cross section points dataframes — rectify_summary","text":"dataframe","code":""},{"path":"/reference/remove_cols_from_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove specified columns from a dataframe if they exist. — remove_cols_from_df","title":"Remove specified columns from a dataframe if they exist. — remove_cols_from_df","text":"Remove specified columns dataframe exist.","code":""},{"path":"/reference/remove_cols_from_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove specified columns from a dataframe if they exist. — remove_cols_from_df","text":"","code":"remove_cols_from_df(df, columns_to_remove)"},{"path":"/reference/remove_cols_from_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove specified columns from a dataframe if they exist. — remove_cols_from_df","text":"df dataframe. columns_to_remove character vector specifying names columns removed.","code":""},{"path":"/reference/remove_cols_from_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove specified columns from a dataframe if they exist. — remove_cols_from_df","text":"dataframe specified columns removed exist.","code":""},{"path":"/reference/renumber_cs_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix IDs in a dataframe — renumber_cs_ids","title":"Fix IDs in a dataframe — renumber_cs_ids","text":"function renumbers cross section IDs dataframe ensure crosswalk_id cross sections numbered 1 total number cross sections crosswalk_id.","code":""},{"path":"/reference/renumber_cs_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix IDs in a dataframe — renumber_cs_ids","text":"","code":"renumber_cs_ids(df, crosswalk_id = NULL)"},{"path":"/reference/renumber_cs_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix IDs in a dataframe — renumber_cs_ids","text":"df dataframe containing crosswalk_id cs_id columns. crosswalk_id crosswalk_id character, name primary ID column","code":""},{"path":"/reference/renumber_cs_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix IDs in a dataframe — renumber_cs_ids","text":"input dataframe renumbered cs_id values.","code":""},{"path":"/reference/rm_multi_intersects.html","id":null,"dir":"Reference","previous_headings":"","what":"Selectively removes intersecting transect lines Attempts to remove transects intersecting other transects by first removing transects that interesect the most other transects, then re checking intersection condition, and doing this until there are no multi intersections this gives the benefit of removing a transect line that intersects many other transects, potentially leaving those other transects with no extraneous intersections ONCE the MULTI intersecting transect is removed — rm_multi_intersects","title":"Selectively removes intersecting transect lines Attempts to remove transects intersecting other transects by first removing transects that interesect the most other transects, then re checking intersection condition, and doing this until there are no multi intersections this gives the benefit of removing a transect line that intersects many other transects, potentially leaving those other transects with no extraneous intersections ONCE the MULTI intersecting transect is removed — rm_multi_intersects","text":"Selectively removes intersecting transect lines Attempts remove transects intersecting transects first removing transects interesect transects, re checking intersection condition,  multi intersections gives benefit removing transect line intersects many transects, potentially leaving transects extraneous intersections MULTI intersecting transect removed","code":""},{"path":"/reference/rm_multi_intersects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selectively removes intersecting transect lines Attempts to remove transects intersecting other transects by first removing transects that interesect the most other transects, then re checking intersection condition, and doing this until there are no multi intersections this gives the benefit of removing a transect line that intersects many other transects, potentially leaving those other transects with no extraneous intersections ONCE the MULTI intersecting transect is removed — rm_multi_intersects","text":"","code":"rm_multi_intersects(x)"},{"path":"/reference/rm_multi_intersects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selectively removes intersecting transect lines Attempts to remove transects intersecting other transects by first removing transects that interesect the most other transects, then re checking intersection condition, and doing this until there are no multi intersections this gives the benefit of removing a transect line that intersects many other transects, potentially leaving those other transects with no extraneous intersections ONCE the MULTI intersecting transect is removed — rm_multi_intersects","text":"x sf dataframe linestrings","code":""},{"path":"/reference/rm_multi_intersects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selectively removes intersecting transect lines Attempts to remove transects intersecting other transects by first removing transects that interesect the most other transects, then re checking intersection condition, and doing this until there are no multi intersections this gives the benefit of removing a transect line that intersects many other transects, potentially leaving those other transects with no extraneous intersections ONCE the MULTI intersecting transect is removed — rm_multi_intersects","text":"sf dataframe","code":""},{"path":"/reference/rm_multiflowline_intersections.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove transect lines that intersect with more than one flowline — rm_multiflowline_intersections","title":"Remove transect lines that intersect with more than one flowline — rm_multiflowline_intersections","text":"Remove transect lines intersect one flowline","code":""},{"path":"/reference/rm_multiflowline_intersections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove transect lines that intersect with more than one flowline — rm_multiflowline_intersections","text":"","code":"rm_multiflowline_intersections(transects, flowlines)"},{"path":"/reference/rm_multiflowline_intersections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove transect lines that intersect with more than one flowline — rm_multiflowline_intersections","text":"transects sf linestring dataframe transect lines flowlines sf linestring dataframe flowlines","code":""},{"path":"/reference/rm_multiflowline_intersections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove transect lines that intersect with more than one flowline — rm_multiflowline_intersections","text":"sf linestring dataframe","code":""},{"path":"/reference/rm_self_intersections.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Self-Intersections — rm_self_intersections","title":"Remove Self-Intersections — rm_self_intersections","text":"dataset flowlines processed remove self-intersections.","code":""},{"path":"/reference/rm_self_intersections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Self-Intersections — rm_self_intersections","text":"","code":"rm_self_intersections"},{"path":"/reference/rm_self_intersections.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Remove Self-Intersections — rm_self_intersections","text":"object class function length 1.","code":""},{"path":"/reference/rm_self_intersections.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Remove Self-Intersections — rm_self_intersections","text":"Generated using rm_self_intersections function.","code":""},{"path":"/reference/select_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Select standard cross section point columns Internal helper function for selecting cross section point columns aligning with standard data model for cross section points — select_cs_pts","title":"Select standard cross section point columns Internal helper function for selecting cross section point columns aligning with standard data model for cross section points — select_cs_pts","text":"Select standard cross section point columns Internal helper function selecting cross section point columns aligning standard data model cross section points","code":""},{"path":"/reference/select_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select standard cross section point columns Internal helper function for selecting cross section point columns aligning with standard data model for cross section points — select_cs_pts","text":"","code":"select_cs_pts(cs_pts, crosswalk_id = NULL)"},{"path":"/reference/select_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select standard cross section point columns Internal helper function for selecting cross section point columns aligning with standard data model for cross section points — select_cs_pts","text":"cs_pts dataframe, tibble, sf dataframe crosswalk_id character, unique ID column","code":""},{"path":"/reference/select_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select standard cross section point columns Internal helper function for selecting cross section point columns aligning with standard data model for cross section points — select_cs_pts","text":"dataframe, tibble, sf dataframe relavent cross section point columns","code":""},{"path":"/reference/select_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Select standard transect columns Internal helper function for selecting transect columns aligning with standard data model for transect — select_transects","title":"Select standard transect columns Internal helper function for selecting transect columns aligning with standard data model for transect — select_transects","text":"Select standard transect columns Internal helper function selecting transect columns aligning standard data model transect","code":""},{"path":"/reference/select_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select standard transect columns Internal helper function for selecting transect columns aligning with standard data model for transect — select_transects","text":"","code":"select_transects(transects, crosswalk_id = NULL)"},{"path":"/reference/select_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select standard transect columns Internal helper function for selecting transect columns aligning with standard data model for transect — select_transects","text":"transects dataframe, tibble, sf dataframe crosswalk_id character, unique ID column","code":""},{"path":"/reference/select_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select standard transect columns Internal helper function for selecting transect columns aligning with standard data model for transect — select_transects","text":"dataframe, tibble, sf dataframe relavent transects columns","code":""},{"path":"/reference/shorten_flagged_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten specific flagged transects by specified distance\nShorten transects by 'extension_distance' if they have a 'flagged' column value of TRUE — shorten_flagged_transects","title":"Shorten specific flagged transects by specified distance\nShorten transects by 'extension_distance' if they have a 'flagged' column value of TRUE — shorten_flagged_transects","text":"Shorten specific flagged transects specified distance Shorten transects 'extension_distance' 'flagged' column value TRUE","code":""},{"path":"/reference/shorten_flagged_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten specific flagged transects by specified distance\nShorten transects by 'extension_distance' if they have a 'flagged' column value of TRUE — shorten_flagged_transects","text":"","code":"shorten_flagged_transects(transects, crosswalk_id = NULL)"},{"path":"/reference/shorten_flagged_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten specific flagged transects by specified distance\nShorten transects by 'extension_distance' if they have a 'flagged' column value of TRUE — shorten_flagged_transects","text":"transects sf dataframe LINESTRINGS, requires 'extension_distance' column specify much flagged transects crosswalk_id character, unique ID column","code":""},{"path":"/reference/shorten_flagged_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorten specific flagged transects by specified distance\nShorten transects by 'extension_distance' if they have a 'flagged' column value of TRUE — shorten_flagged_transects","text":"sf dataframe transects shortened transects flagged TRUE","code":""},{"path":"/reference/shorten_multi_flowline_intersecting_extended_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes any transects that was extended and with multiple flowline intersections, and shortens them by the distance specified in the ","title":"Takes any transects that was extended and with multiple flowline intersections, and shortens them by the distance specified in the ","text":"Takes transects extended multiple flowline intersections, shortens distance specified \"extension_distance\" column","code":""},{"path":"/reference/shorten_multi_flowline_intersecting_extended_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes any transects that was extended and with multiple flowline intersections, and shortens them by the distance specified in the ","text":"","code":"shorten_multi_flowline_intersecting_extended_transects(   x,   flowlines,   crosswalk_id = NULL )"},{"path":"/reference/shorten_multi_flowline_intersecting_extended_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes any transects that was extended and with multiple flowline intersections, and shortens them by the distance specified in the ","text":"x sf dataframe transects, requires crosswalk_id, cs_id, cs_lengthm, extension_distance, geometry column flowlines sf dataframe flowline LINESTRINGS compare crosswalk_id character, unique ID column","code":""},{"path":"/reference/shorten_multi_flowline_intersecting_extended_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes any transects that was extended and with multiple flowline intersections, and shortens them by the distance specified in the ","text":"sf dataframe transects transects intersect multiple transects shortened -extension_distance","code":""},{"path":"/reference/shorten_multi_transect_intersecting_extended_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes any transects with multiple intersections that was extended, and shortens them by the distance specified in the ","title":"Takes any transects with multiple intersections that was extended, and shortens them by the distance specified in the ","text":"Takes transects multiple intersections extended, shortens distance specified \"extension_distance\" column","code":""},{"path":"/reference/shorten_multi_transect_intersecting_extended_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes any transects with multiple intersections that was extended, and shortens them by the distance specified in the ","text":"","code":"shorten_multi_transect_intersecting_extended_transects(x, crosswalk_id = NULL)"},{"path":"/reference/shorten_multi_transect_intersecting_extended_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes any transects with multiple intersections that was extended, and shortens them by the distance specified in the ","text":"x sf dataframe transects, requires crosswalk_id, cs_id, cs_lengthm, extension_distance, geometry column crosswalk_id character, unique ID column","code":""},{"path":"/reference/shorten_multi_transect_intersecting_extended_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes any transects with multiple intersections that was extended, and shortens them by the distance specified in the ","text":"sf dataframe transects transects intersect multiple transects shortened -extension_distance","code":""},{"path":"/reference/transects_missing_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Transects Missing Depth — transects_missing_depth","title":"Transects Missing Depth — transects_missing_depth","text":"dataset transects depth information unavailable, potentially impacting hydraulic model accuracy.","code":""},{"path":"/reference/transects_missing_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transects Missing Depth — transects_missing_depth","text":"","code":"transects_missing_depth"},{"path":"/reference/transects_missing_depth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transects Missing Depth — transects_missing_depth","text":"object class sf (inherits tbl_df, tbl, data.frame) 5 rows 8 columns.","code":""},{"path":"/reference/transects_missing_depth.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transects Missing Depth — transects_missing_depth","text":"Derived transect processing pipeline.","code":""},{"path":"/reference/transects_to_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SF linestring transect lines into SF points with — transects_to_cs_pts","title":"Convert SF linestring transect lines into SF points with — transects_to_cs_pts","text":"Convert SF linestring transect lines SF points ","code":""},{"path":"/reference/transects_to_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SF linestring transect lines into SF points with — transects_to_cs_pts","text":"","code":"transects_to_cs_pts(transects, points_per_cs)"},{"path":"/reference/transects_to_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SF linestring transect lines into SF points with — transects_to_cs_pts","text":"transects sf linestring points_per_cs numeric vector length 'transects', indicating number points get per transect","code":""},{"path":"/reference/transects_to_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SF linestring transect lines into SF points with — transects_to_cs_pts","text":"sf point dataframe","code":""},{"path":"/reference/trim_transects_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim a set of transects to the bounds of polygons — trim_transects_to_polygons","title":"Trim a set of transects to the bounds of polygons — trim_transects_to_polygons","text":"Trim set transects bounds polygons","code":""},{"path":"/reference/trim_transects_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim a set of transects to the bounds of polygons — trim_transects_to_polygons","text":"","code":"trim_transects_to_polygons(   transect_lines,   flowlines,   polygons,   crosswalk_id = NULL,   dissolve = FALSE )"},{"path":"/reference/trim_transects_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim a set of transects to the bounds of polygons — trim_transects_to_polygons","text":"transect_lines sf dataframe flowlines sf dataframe polygons sf dataframe crosswalk_id character unique ID dissolve logical, whether dissolve polygon internal boundaries . Default FALSE.","code":""},{"path":"/reference/trim_transects_to_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim a set of transects to the bounds of polygons — trim_transects_to_polygons","text":"sf dataframe","code":""},{"path":"/reference/unique_braids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of braid IDs containing COMIDs in each braid for a single continguous network — unique_braids","title":"Create a list of braid IDs containing COMIDs in each braid for a single continguous network — unique_braids","text":"Find uniquely identify braids network flowlines, given dataframe containing comid, fromnode, tonode divergence columns. 'find_braids()\" identifies braids cycles graph representation river network. Internal function use 'get_braid_list()'","code":""},{"path":"/reference/unique_braids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of braid IDs containing COMIDs in each braid for a single continguous network — unique_braids","text":"","code":"unique_braids(network, start = NULL, verbose = FALSE)"},{"path":"/reference/unique_braids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of braid IDs containing COMIDs in each braid for a single continguous network — unique_braids","text":"network network object representing river network. start Optional argument specifying starting point braid detection. verbose Logical indicating whether display verbose messages braid detection process.","code":""},{"path":"/reference/unique_braids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of braid IDs containing COMIDs in each braid for a single continguous network — unique_braids","text":"list braid IDs COMIDs within braid","code":""},{"path":"/reference/unnpack_braids.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unnpack_braids","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unnpack_braids","text":"Unnests comma seperated braid_id column individual rows braid ID/comid pairing. function unnest nested braid_ids column output calling 'find_braids()' 'nested = TRUE', essentially giving output running 'nested = FALSE'.","code":""},{"path":"/reference/unnpack_braids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unnpack_braids","text":"","code":"unnpack_braids(braids, into_list = FALSE)"},{"path":"/reference/unnpack_braids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unnpack_braids","text":"braids dataframe sf dataframe containing \"comid\" \"braid_id\" column into_list logical, TRUE, unpacked braid_ids corresponding comids returned list. Default FALSE","code":""},{"path":"/reference/unnpack_braids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unnpack_braids","text":"dataframe list","code":""},{"path":"/reference/unnpack_braids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unnpack_braids","text":"","code":"if (FALSE) { # get a NHDPlus flowlines network net <- nhdplusTools::navigate_network(start = 101, mode = \"UT\", distance_km = 100)  # Drop some columns for clarity net <- dplyr::select(net, comid, divergence, fromnode, tonode)  # locate braids in the network and specify nested braid_id return braids <- find_braids(net, add = TRUE, nested = TRUE)  # unnest the nested braid_id column (explode the list column into individual rows) unpacked <- unnpack_braids(braids) }"},{"path":"/reference/unpack_braids.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unpack_braids","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unpack_braids","text":"Unnests comma separated braid_id column individual rows braid ID/crosswalk_id pairing. function unnest nested braid_ids column output calling 'find_braids()' 'nested = TRUE', essentially giving output running 'nested = FALSE'.","code":""},{"path":"/reference/unpack_braids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unpack_braids","text":"","code":"unpack_braids(x, crosswalk_id = NULL, into_list = FALSE)"},{"path":"/reference/unpack_braids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unpack_braids","text":"x dataframe sf dataframe containing \"comid\" \"braid_id\" column crosswalk_id unique ID column name into_list logical, TRUE, unpacked braid_ids corresponding crosswalk_ids returned list. Default FALSE","code":""},{"path":"/reference/unpack_braids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unpack_braids","text":"dataframe list","code":""},{"path":"/reference/unpack_braids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function that takes the output from 'find_braids(nested = TRUE)' and unpacks/unnests braid_id column — unpack_braids","text":"","code":"if (FALSE) { # \\dontrun{ # get a NHDPlus flowlines network net <- nhdplusTools::navigate_network(start = 101, mode = \"UT\", distance_km = 100)  # Drop some columns for clarity net <- dplyr::select(net, comid, divergence, fromnode, tonode)  # locate braids in the network and specify nested braid_id return braids <- find_braids(net, add = TRUE, nested = TRUE)  # unnest the nested braid_id column (explode the list column into individual rows) unpacked <- unpack_braids(braids) } # }"},{"path":"/reference/validate_classified_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Classified Cross Sections Points Ensure all cross section points are valid. This validates the points in the same manner as validate_cs_pts() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts","title":"Validate Classified Cross Sections Points Ensure all cross section points are valid. This validates the points in the same manner as validate_cs_pts() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts","text":"Validate Classified Cross Sections Points Ensure cross section points valid. validates points manner validate_cs_pts() also checks classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist.","code":""},{"path":"/reference/validate_classified_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Classified Cross Sections Points Ensure all cross section points are valid. This validates the points in the same manner as validate_cs_pts() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts","text":"","code":"validate_classified_cs_pts(cs_pts, crosswalk_id = NULL)"},{"path":"/reference/validate_classified_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Classified Cross Sections Points Ensure all cross section points are valid. This validates the points in the same manner as validate_cs_pts() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts","text":"cs_pts sf object, cross section points crosswalk_id character, column name crosswalk id","code":""},{"path":"/reference/validate_classified_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Classified Cross Sections Points Ensure all cross section points are valid. This validates the points in the same manner as validate_cs_pts() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts","text":"logical, TRUE cs_pts meet required criteria, FALSE otherwise","code":""},{"path":"/reference/validate_classified_cs_pts_against_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Classified Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects. This validates the points in the same manner as validate_cs_pts_against_transects() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts_against_transects","title":"Validate Classified Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects. This validates the points in the same manner as validate_cs_pts_against_transects() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts_against_transects","text":"Validate Classified Cross Section Points Transects Ensure cross section points valid relative set transects. validates points manner validate_cs_pts_against_transects() also checks classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist.","code":""},{"path":"/reference/validate_classified_cs_pts_against_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Classified Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects. This validates the points in the same manner as validate_cs_pts_against_transects() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts_against_transects","text":"","code":"validate_classified_cs_pts_against_transects(   cs_pts,   transects,   crosswalk_id = NULL )"},{"path":"/reference/validate_classified_cs_pts_against_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Classified Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects. This validates the points in the same manner as validate_cs_pts_against_transects() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts_against_transects","text":"cs_pts sf object, cross section points transects sf object, transects crosswalk_id character, column name crosswalk id","code":""},{"path":"/reference/validate_classified_cs_pts_against_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Classified Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects. This validates the points in the same manner as validate_cs_pts_against_transects() but also checks that classification columns ('class', 'point_type', 'valid_banks', 'has_relief') exist. — validate_classified_cs_pts_against_transects","text":"logical, TRUE validations pass, FALSE otherwise","code":""},{"path":"/reference/validate_cs_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cross Sections Points Ensure all cross section points are valid — validate_cs_pts","title":"Validate Cross Sections Points Ensure all cross section points are valid — validate_cs_pts","text":"Validate Cross Sections Points Ensure cross section points valid","code":""},{"path":"/reference/validate_cs_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cross Sections Points Ensure all cross section points are valid — validate_cs_pts","text":"","code":"validate_cs_pts(cs_pts, crosswalk_id = NULL)"},{"path":"/reference/validate_cs_pts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cross Sections Points Ensure all cross section points are valid — validate_cs_pts","text":"cs_pts sf object, cross section points crosswalk_id character, column name crosswalk id","code":""},{"path":"/reference/validate_cs_pts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cross Sections Points Ensure all cross section points are valid — validate_cs_pts","text":"logical, TRUE cs_pts meet required criteria, FALSE otherwise","code":""},{"path":"/reference/validate_cs_pts_against_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects — validate_cs_pts_against_transects","title":"Validate Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects — validate_cs_pts_against_transects","text":"Validate Cross Section Points Transects Ensure cross section points valid relative set transects","code":""},{"path":"/reference/validate_cs_pts_against_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects — validate_cs_pts_against_transects","text":"","code":"validate_cs_pts_against_transects(cs_pts, transects, crosswalk_id = NULL)"},{"path":"/reference/validate_cs_pts_against_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects — validate_cs_pts_against_transects","text":"cs_pts sf object, cross section points transects sf object, transects crosswalk_id character, column name crosswalk id","code":""},{"path":"/reference/validate_cs_pts_against_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Cross Section Points Against Transects Ensure all cross section points are valid relative to a set of transects — validate_cs_pts_against_transects","text":"logical, TRUE validations pass, FALSE otherwise","code":""},{"path":"/reference/validate_transects.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Transects — validate_transects","title":"Validate Transects — validate_transects","text":"Validate Transects","code":""},{"path":"/reference/validate_transects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Transects — validate_transects","text":"","code":"validate_transects(transects, crosswalk_id = NULL)"},{"path":"/reference/validate_transects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Transects — validate_transects","text":"transects sf object, transects crosswalk_id character, column name crosswalk id","code":""},{"path":"/reference/validate_transects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Transects — validate_transects","text":"logical, TRUE validations pass, FALSE otherwise","code":""},{"path":"/reference/validate_transects_against_flowlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Transects Against Flowlines Ensure all transects are valid relative to a set of flowlines — validate_transects_against_flowlines","title":"Validate Transects Against Flowlines Ensure all transects are valid relative to a set of flowlines — validate_transects_against_flowlines","text":"Validate Transects Flowlines Ensure transects valid relative set flowlines","code":""},{"path":"/reference/validate_transects_against_flowlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Transects Against Flowlines Ensure all transects are valid relative to a set of flowlines — validate_transects_against_flowlines","text":"","code":"validate_transects_against_flowlines(transects, flowlines, crosswalk_id = NULL)"},{"path":"/reference/validate_transects_against_flowlines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Transects Against Flowlines Ensure all transects are valid relative to a set of flowlines — validate_transects_against_flowlines","text":"transects sf object, transects flowlines sf object, flowlines crosswalk_id character, column name crosswalk id","code":""},{"path":"/reference/validate_transects_against_flowlines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Transects Against Flowlines Ensure all transects are valid relative to a set of flowlines — validate_transects_against_flowlines","text":"logical, TRUE validations pass, FALSE otherwise","code":""}]
